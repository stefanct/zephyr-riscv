
outdir/zc706/zephyr.elf:     file format elf32-littleriscv


Disassembly of section vector:

80000000 <vinit>:

	/*
	 * Set mtvec (Machine Trap-Vector Base-Address Register)
	 * to __irq_wrapper.
	 */
	la t0, __irq_wrapper
80000000:	00000297          	auipc	t0,0x0
80000004:	01028293          	addi	t0,t0,16 # 80000010 <__irq_wrapper>
	csrw mtvec, t0
80000008:	30529073          	csrw	mtvec,t0

	/* Jump to __start */
	tail __start
8000000c:	5e10106f          	j	80001dec <__start>

Disassembly of section exceptions:

80000010 <__irq_wrapper>:
80000010:	fb010113          	addi	sp,sp,-80
	 * floating-point registers should be accounted for when corresponding
	 * config variable is set
	 */
	// todo: optimize away unneeded reg store/loads
	// atm: t3, t4, t5, t6 unused in app assembly
	sw ra, __NANO_ESF_ra_OFFSET(sp)
80000014:	00112023          	sw	ra,0(sp)
	sw gp, __NANO_ESF_gp_OFFSET(sp)
80000018:	00312223          	sw	gp,4(sp)
	sw tp, __NANO_ESF_tp_OFFSET(sp)
8000001c:	00412423          	sw	tp,8(sp)
	sw t0, __NANO_ESF_t0_OFFSET(sp)
80000020:	00512623          	sw	t0,12(sp)
	sw t1, __NANO_ESF_t1_OFFSET(sp)
80000024:	00612823          	sw	t1,16(sp)
	sw t2, __NANO_ESF_t2_OFFSET(sp)
80000028:	00712a23          	sw	t2,20(sp)
#if CONFIG_FE310_ISR_PLIC_OPT_LVL > 2
	// leave out
#else
	sw t3, __NANO_ESF_t3_OFFSET(sp)
8000002c:	01c12c23          	sw	t3,24(sp)
	sw t4, __NANO_ESF_t4_OFFSET(sp)
80000030:	01d12e23          	sw	t4,28(sp)
	sw t5, __NANO_ESF_t5_OFFSET(sp)
80000034:	03e12023          	sw	t5,32(sp)
	sw t6, __NANO_ESF_t6_OFFSET(sp)
80000038:	03f12223          	sw	t6,36(sp)
#endif // CONFIG_FE310_ISR_PLIC_OPT_LVL
	sw a0, __NANO_ESF_a0_OFFSET(sp)
8000003c:	02a12423          	sw	a0,40(sp)
	sw a1, __NANO_ESF_a1_OFFSET(sp)
80000040:	02b12623          	sw	a1,44(sp)
	sw a2, __NANO_ESF_a2_OFFSET(sp)
80000044:	02c12823          	sw	a2,48(sp)
	sw a3, __NANO_ESF_a3_OFFSET(sp)
80000048:	02d12a23          	sw	a3,52(sp)
	sw a4, __NANO_ESF_a4_OFFSET(sp)
8000004c:	02e12c23          	sw	a4,56(sp)
	sw a5, __NANO_ESF_a5_OFFSET(sp)
80000050:	02f12e23          	sw	a5,60(sp)
	sw a6, __NANO_ESF_a6_OFFSET(sp)
80000054:	05012023          	sw	a6,64(sp)
	sw a7, __NANO_ESF_a7_OFFSET(sp)
80000058:	05112223          	sw	a7,68(sp)


	/* Save MEPC register */
	csrr t0, mepc
8000005c:	341022f3          	csrr	t0,mepc
	sw t0, __NANO_ESF_mepc_OFFSET(sp)
80000060:	04512423          	sw	t0,72(sp)

	/* Save SOC-specific MSTATUS register */
	csrr t0, SOC_MSTATUS_REG
80000064:	300022f3          	csrr	t0,mstatus
	sw t0, __NANO_ESF_mstatus_OFFSET(sp)
80000068:	04512623          	sw	t0,76(sp)
	 * interrupt. Hence, check for interrupt/exception via the __soc_is_irq
	 * function (that needs to be implemented by each SOC). The result is
	 * returned via register a0 (1: interrupt, 0 exception)
	 */

	jal ra, __soc_is_irq
8000006c:	1e4000ef          	jal	ra,80000250 <__soc_is_irq>
		

	/* If a0 != 0, jump to is_interrupt */
	addi t1, x0, 0
80000070:	00000313          	li	t1,0
	bnez a0, is_interrupt
80000074:	02051c63          	bnez	a0,800000ac <is_interrupt>
	 * If exception is not an interrupt, MEPC will contain
	 * the instruction address, which has caused the exception.
	 * Increment saved MEPC by 4 to prevent running into the
	 * exception again, upon exiting the ISR.
	 */
	lw t0, __NANO_ESF_mepc_OFFSET(sp)
80000078:	04812283          	lw	t0,72(sp)
	addi t0, t0, 4
8000007c:	00428293          	addi	t0,t0,4
	sw t0, __NANO_ESF_mepc_OFFSET(sp)
80000080:	04512423          	sw	t0,72(sp)
	/*
	 * If the exception is the result of an ECALL, check whether to
	 * perform a context-switch or an IRQ offload. Otherwise call _Fault
	 * to report the exception.
	 */
	csrr t0, mcause
80000084:	342022f3          	csrr	t0,mcause
	li t2, SOC_MCAUSE_EXP_MASK
80000088:	800003b7          	lui	t2,0x80000
8000008c:	fff38393          	addi	t2,t2,-1 # 7fffffff <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80000000>
	and t0, t0, t2
80000090:	0072f2b3          	and	t0,t0,t2
	li t1, SOC_MCAUSE_ECALL_EXP
80000094:	00b00313          	li	t1,11
#else
	/*
	 * Go to reschedule to handle context-switch if system call,
	 * otherwise call _Fault to handle exception
	 */
	beq t0, t1, reschedule
80000098:	0a628c63          	beq	t0,t1,80000150 <reschedule>
	 * Stack pointer is pointing to a NANO_ESF structure, pass it
	 * to _Fault (via register a0).
	 * If _Fault shall return, set return address to no_reschedule
	 * to restore stack.
	 */
	addi a0, sp, 0
8000009c:	00010513          	mv	a0,sp
	la ra, no_reschedule
800000a0:	00000097          	auipc	ra,0x0
800000a4:	14008093          	addi	ra,ra,320 # 800001e0 <no_reschedule>
	tail _Fault
800000a8:	71d0106f          	j	80001fc4 <_Fault>

800000ac <is_interrupt>:
800000ac:	00010293          	mv	t0,sp
	 * Save current thread stack pointer and switch
	 * stack pointer to interrupt stack.
	 */

	/* Save thread stack pointer to temp register t0 */
	addi t0, sp, 0
800000b0:	00003397          	auipc	t2,0x3

	/* Switch to interrupt stack */
	la t2, _kernel
800000b4:	48038393          	addi	t2,t2,1152 # 80003530 <_kernel>
800000b8:	0043a103          	lw	sp,4(t2)
	lw sp, _kernel_offset_to_irq_stack(t2)
800000bc:	ff010113          	addi	sp,sp,-16

	/*
	 * Save thread stack pointer on interrupt stack
	 * In RISC-V, stack pointer needs to be 16-byte aligned
	 */
	addi sp, sp, -16
800000c0:	00512023          	sw	t0,0(sp)

800000c4 <on_irq_stack>:
	sw t0, 0x00(sp)
800000c4:	0003ae03          	lw	t3,0(t2)

on_irq_stack:
	/* Increment _kernel.nested variable */
	lw t3, _kernel_offset_to_nested(t2)
800000c8:	001e0e13          	addi	t3,t3,1
	addi t3, t3, 1
800000cc:	01c3a023          	sw	t3,0(t2)
	sw t3, _kernel_offset_to_nested(t2)
800000d0:	00030863          	beqz	t1,800000e0 <call_irq>

	/*
	 * If we are here due to a system call, t1 register should != 0.
	 * In this case, perform IRQ offloading, otherwise jump to call_irq
	 */
	beqz t1, call_irq
800000d4:	00000097          	auipc	ra,0x0
	/*
	 * Call _irq_do_offload to handle IRQ offloading.
	 * Set return address to on_thread_stack in order to jump there
	 * upon returning from _irq_do_offload
	 */
	la ra, on_thread_stack
800000d8:	04808093          	addi	ra,ra,72 # 8000011c <on_thread_stack>
800000dc:	07c0206f          	j	80002158 <_irq_do_offload>

800000e0 <call_irq>:
	tail _irq_do_offload
800000e0:	34202573          	csrr	a0,mcause
800000e4:	800002b7          	lui	t0,0x80000
	call _sys_k_event_logger_interrupt
#endif

	/* Get IRQ causing interrupt */
	/* For global interrupts this will give plic port */
	csrr a0, mcause
800000e8:	fff28293          	addi	t0,t0,-1 # 7fffffff <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80000000>
	li t0, SOC_MCAUSE_EXP_MASK
800000ec:	00557533          	and	a0,a0,t0
800000f0:	150000ef          	jal	ra,80000240 <__soc_handle_irq>
	and a0, a0, t0
800000f4:	00c000ef          	jal	ra,80000100 <call_sw_table>

800000f8 <bypass_sw_table>:

	/*
	 * Clear pending IRQ generating the interrupt at SOC level
	 * Pass IRQ number to __soc_handle_irq via register a0
	 */
	jal ra, __soc_handle_irq	// uses t0, t1, a0
800000f8:	6ac010ef          	jal	ra,800017a4 <plic_fe310_irq_handler_fast>
	beq t1, a0, bypass_sw_table
	/* else normal code */
	jal ra, call_sw_table

#else
	jal ra, call_sw_table
800000fc:	0200006f          	j	8000011c <on_thread_stack>

80000100 <call_sw_table>:
#endif

bypass_sw_table:
	call plic_fe310_irq_handler_fast
80000100:	00000297          	auipc	t0,0x0
80000104:	19028293          	addi	t0,t0,400 # 80000290 <_sw_isr_table>
	j on_thread_stack
80000108:	00351513          	slli	a0,a0,0x3
call_sw_table:
	/*
	 * Call corresponding registered function in _sw_isr_table.
	 * (table is 8-bytes wide, we should shift index by 3)
	 */
	la t0, _sw_isr_table
8000010c:	00a282b3          	add	t0,t0,a0
80000110:	0002a503          	lw	a0,0(t0)
	slli a0, a0, 3
80000114:	0042a303          	lw	t1,4(t0)
	add t0, t0, a0
80000118:	000300e7          	jalr	t1

8000011c <on_thread_stack>:

	/* Load argument in a0 register */
	lw a0, 0x00(t0)
8000011c:	00003317          	auipc	t1,0x3

	/* Load ISR function address in register t1 */
	lw t1, 0x04(t0)
80000120:	41430313          	addi	t1,t1,1044 # 80003530 <_kernel>

	/* Call ISR function */
	jalr ra, t1
80000124:	00032383          	lw	t2,0(t1)

on_thread_stack:
	/* Get reference to _kernel */
	la t1, _kernel
80000128:	fff38393          	addi	t2,t2,-1
8000012c:	00732023          	sw	t2,0(t1)

	/* Decrement _kernel.nested variable */
	lw t2, _kernel_offset_to_nested(t1)
80000130:	00012283          	lw	t0,0(sp)
	addi t2, t2, -1
80000134:	00028113          	mv	sp,t0
	sw t2, _kernel_offset_to_nested(t1)
80000138:	00832383          	lw	t2,8(t1)

	/* Restore thread stack pointer */
	lw t0, 0x00(sp)
8000013c:	00a3de03          	lhu	t3,10(t2)
	addi sp, t0, 0
80000140:	08000e93          	li	t4,128
	/*
	 * Check if we need to perform a reschedule
	 */

	/* Get pointer to _kernel.current */
	lw t2, _kernel_offset_to_current(t1)
80000144:	09de7e63          	bleu	t4,t3,800001e0 <no_reschedule>

	/*
	 * If non-preemptible thread, do not schedule
	 * (see explanation of preempt field in kernel_structs.h
	 */
	lhu t3, _thread_offset_to_preempt(t2)
80000148:	01432e03          	lw	t3,20(t1)
	li t4, _NON_PREEMPT_THRESHOLD
8000014c:	087e0a63          	beq	t3,t2,800001e0 <no_reschedule>

80000150 <reschedule>:
	bgeu t3, t4, no_reschedule	
80000150:	5b0020ef          	jal	ra,80002700 <_update_time_slice_before_swap>

	/*
	 * Check if next thread to schedule is current thread.
	 * If yes do not perform a reschedule
	 */
	lw t3, _kernel_offset_to_ready_q_cache(t1)
80000154:	00003297          	auipc	t0,0x3
	beq t3, t2, no_reschedule
80000158:	3dc28293          	addi	t0,t0,988 # 80003530 <_kernel>
	j no_reschedule
#endif /* CONFIG_PREEMPT_ENABLED */

reschedule:
#if CONFIG_TIMESLICING
	call _update_time_slice_before_swap
8000015c:	0082a303          	lw	t1,8(t0)
80000160:	02832623          	sw	s0,44(t1)
#endif
#if CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH
	call _sys_k_event_logger_context_switch
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH */
	/* Get reference to _kernel */
	la t0, _kernel
80000164:	02932823          	sw	s1,48(t1)
80000168:	03232a23          	sw	s2,52(t1)

	/* Get pointer to _kernel.current */
	lw t1, _kernel_offset_to_current(t0)
8000016c:	03332c23          	sw	s3,56(t1)

	/*
	 * Save callee-saved registers of current thread
	 * prior to handle context-switching
	 */
	sw s0, _thread_offset_to_s0(t1)
80000170:	03432e23          	sw	s4,60(t1)
	sw s1, _thread_offset_to_s1(t1)
80000174:	05532023          	sw	s5,64(t1)
	sw s2, _thread_offset_to_s2(t1)
80000178:	05632223          	sw	s6,68(t1)
	sw s3, _thread_offset_to_s3(t1)
8000017c:	05732423          	sw	s7,72(t1)
	sw s4, _thread_offset_to_s4(t1)
80000180:	05832623          	sw	s8,76(t1)
	sw s5, _thread_offset_to_s5(t1)
80000184:	05932823          	sw	s9,80(t1)
	sw s6, _thread_offset_to_s6(t1)
80000188:	05a32a23          	sw	s10,84(t1)
	sw s7, _thread_offset_to_s7(t1)
8000018c:	05b32c23          	sw	s11,88(t1)
	sw s8, _thread_offset_to_s8(t1)
80000190:	02232423          	sw	sp,40(t1)
	sw s9, _thread_offset_to_s9(t1)
80000194:	00003397          	auipc	t2,0x3
	sw s10, _thread_offset_to_s10(t1)
80000198:	24c38393          	addi	t2,t2,588 # 800033e0 <_k_neg_eagain>
	sw s11, _thread_offset_to_s11(t1)
8000019c:	0003ae03          	lw	t3,0(t2)

	/*
	 * Save stack pointer of current thread and set the default return value
	 * of _Swap to _k_neg_eagain for the thread.
	 */
	sw sp, _thread_offset_to_sp(t1)
800001a0:	07c32423          	sw	t3,104(t1)
	la t2, _k_neg_eagain
800001a4:	0142a303          	lw	t1,20(t0)
800001a8:	0062a423          	sw	t1,8(t0)
	lw t3, 0x00(t2)
800001ac:	02832103          	lw	sp,40(t1)
	sw t3, _thread_offset_to_swap_return_value(t1)
800001b0:	02c32403          	lw	s0,44(t1)

	/* Get next thread to schedule. */
	lw t1, _kernel_offset_to_ready_q_cache(t0)
800001b4:	03032483          	lw	s1,48(t1)

	/*
	 * Set _kernel.current to new thread loaded in t1
	 */
	sw t1, _kernel_offset_to_current(t0)
800001b8:	03432903          	lw	s2,52(t1)

	/* Switch to new thread stack */
	lw sp, _thread_offset_to_sp(t1)
800001bc:	03832983          	lw	s3,56(t1)

	/* Restore callee-saved registers of new thread */
	lw s0, _thread_offset_to_s0(t1)
800001c0:	03c32a03          	lw	s4,60(t1)
	lw s1, _thread_offset_to_s1(t1)
800001c4:	04032a83          	lw	s5,64(t1)
	lw s2, _thread_offset_to_s2(t1)
800001c8:	04432b03          	lw	s6,68(t1)
	lw s3, _thread_offset_to_s3(t1)
800001cc:	04832b83          	lw	s7,72(t1)
	lw s4, _thread_offset_to_s4(t1)
800001d0:	04c32c03          	lw	s8,76(t1)
	lw s5, _thread_offset_to_s5(t1)
800001d4:	05032c83          	lw	s9,80(t1)
	lw s6, _thread_offset_to_s6(t1)
800001d8:	05432d03          	lw	s10,84(t1)
	lw s7, _thread_offset_to_s7(t1)
800001dc:	05832d83          	lw	s11,88(t1)

800001e0 <no_reschedule>:
	lw s8, _thread_offset_to_s8(t1)
800001e0:	04812283          	lw	t0,72(sp)
	lw s9, _thread_offset_to_s9(t1)
800001e4:	34129073          	csrw	mepc,t0
	lw s10, _thread_offset_to_s10(t1)
800001e8:	04c12283          	lw	t0,76(sp)
	lw s11, _thread_offset_to_s11(t1)
800001ec:	30029073          	csrw	mstatus,t0
	/* Restore context at SOC level */
	jal ra, __soc_restore_context
#endif /* CONFIG_RISCV_SOC_CONTEXT_SAVE */

	/* Restore MEPC register */
	lw t0, __NANO_ESF_mepc_OFFSET(sp)
800001f0:	00012083          	lw	ra,0(sp)
	csrw mepc, t0
800001f4:	00412183          	lw	gp,4(sp)

	/* Restore SOC-specific MSTATUS register */
	lw t0, __NANO_ESF_mstatus_OFFSET(sp)
800001f8:	00812203          	lw	tp,8(sp)
	csrw SOC_MSTATUS_REG, t0
800001fc:	00c12283          	lw	t0,12(sp)

	/* Restore caller-saved registers from thread stack */
	lw ra, __NANO_ESF_ra_OFFSET(sp)
80000200:	01012303          	lw	t1,16(sp)
	lw gp, __NANO_ESF_gp_OFFSET(sp)
80000204:	01412383          	lw	t2,20(sp)
	lw tp, __NANO_ESF_tp_OFFSET(sp)
80000208:	01812e03          	lw	t3,24(sp)
	lw t0, __NANO_ESF_t0_OFFSET(sp)
8000020c:	01c12e83          	lw	t4,28(sp)
	lw t1, __NANO_ESF_t1_OFFSET(sp)
80000210:	02012f03          	lw	t5,32(sp)
	lw t2, __NANO_ESF_t2_OFFSET(sp)
80000214:	02412f83          	lw	t6,36(sp)
#if CONFIG_FE310_ISR_PLIC_OPT_LVL > 2
#else
	lw t3, __NANO_ESF_t3_OFFSET(sp)
80000218:	02812503          	lw	a0,40(sp)
	lw t4, __NANO_ESF_t4_OFFSET(sp)
8000021c:	02c12583          	lw	a1,44(sp)
	lw t5, __NANO_ESF_t5_OFFSET(sp)
80000220:	03012603          	lw	a2,48(sp)
	lw t6, __NANO_ESF_t6_OFFSET(sp)
80000224:	03412683          	lw	a3,52(sp)
#endif 
	lw a0, __NANO_ESF_a0_OFFSET(sp)
80000228:	03812703          	lw	a4,56(sp)
	lw a1, __NANO_ESF_a1_OFFSET(sp)
8000022c:	03c12783          	lw	a5,60(sp)
	lw a2, __NANO_ESF_a2_OFFSET(sp)
80000230:	04012803          	lw	a6,64(sp)
	lw a3, __NANO_ESF_a3_OFFSET(sp)
80000234:	04412883          	lw	a7,68(sp)
	lw a4, __NANO_ESF_a4_OFFSET(sp)
80000238:	05010113          	addi	sp,sp,80
	lw a5, __NANO_ESF_a5_OFFSET(sp)
8000023c:	30200073          	mret

80000240 <__soc_handle_irq>:
 * SOC-specific function to handle pending IRQ number generating the interrupt.
 * Exception number is given as parameter via register a0.
 */
SECTION_FUNC(exception.other, __soc_handle_irq)
	/* Clear exception number from CSR mip register */
	li t1, 1
80000240:	00100313          	li	t1,1
	sll t0, t1, a0
80000244:	00a312b3          	sll	t0,t1,a0
	csrrc t1, mip, t0
80000248:	3442b373          	csrrc	t1,mip,t0

	/* Return */
	jalr x0, ra
8000024c:	00008067          	ret

80000250 <__soc_is_irq>:
 * return 1 (interrupt) or 0 (exception)
 *
 */
SECTION_FUNC(exception.other, __soc_is_irq)
	/* Read mcause and check if interrupt bit is set */
	csrr t0, mcause
80000250:	342022f3          	csrr	t0,mcause
	li t1, SOC_MCAUSE_IRQ_MASK
80000254:	80000337          	lui	t1,0x80000
	and t0, t0, t1
80000258:	0062f2b3          	and	t0,t0,t1

	/* If interrupt bit is not set, return with 0 */
	addi a0, x0, 0
8000025c:	00000513          	li	a0,0
	beqz t0, not_interrupt
80000260:	00028463          	beqz	t0,80000268 <not_interrupt>
	addi a0, a0, 1
80000264:	00150513          	addi	a0,a0,1

80000268 <not_interrupt>:

not_interrupt:
	/* return */
	jalr x0, ra
80000268:	00008067          	ret

8000026c <__swap>:
 * key is stored in a0 register
 */
SECTION_FUNC(exception.other, __swap)

	/* Make a system call to perform context switch */
	ecall
8000026c:	00000073          	ecall
	 * Prior to unlocking irq, load return value of
	 * __swap to temp register t2 (from
	 * _thread_offset_to_swap_return_value). Normally, it should be -EAGAIN,
	 * unless someone has previously called _set_thread_return_value(..).
	 */
	la t0, _kernel
80000270:	00003297          	auipc	t0,0x3
80000274:	2c028293          	addi	t0,t0,704 # 80003530 <_kernel>

	/* Get pointer to _kernel.current */
	lw t1, _kernel_offset_to_current(t0)
80000278:	0082a303          	lw	t1,8(t0)

	/* Load return value of __swap function in temp register t2 */
	lw t2, _thread_offset_to_swap_return_value(t1)
8000027c:	06832383          	lw	t2,104(t1) # 80000068 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80000069>

	/*
	 * Unlock irq, following IRQ lock state in a0 register.
	 * Use atomic instruction csrrs to do so.
	 */
	andi a0, a0, SOC_MSTATUS_IEN
80000280:	00857513          	andi	a0,a0,8
	csrrs t0, mstatus, a0
80000284:	300522f3          	csrrs	t0,mstatus,a0

	/* Set value of return register a0 to value of register t2 */
	addi a0, t2, 0
80000288:	00038513          	mv	a0,t2

	/* Return */
	jalr x0, ra
8000028c:	00008067          	ret

Disassembly of section text:

80000290 <_sw_isr_table>:
80000290:	00000000 80002040 00000000 80002040     ....@ ......@ ..
800002a0:	00000000 80002040 00000000 80002040     ....@ ......@ ..
800002b0:	00000000 80002040 00000000 80002040     ....@ ......@ ..
800002c0:	00000000 80002040 00000000 80001568     ....@ ......h...
800002d0:	00000000 80002040 00000000 80002040     ....@ ......@ ..
800002e0:	00000000 80002040 00000000 80001630     ....@ ......0...
800002f0:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000300:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000310:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000320:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000330:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000340:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000350:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000360:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000370:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000380:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000390:	00000000 80002040 00000000 80002040     ....@ ......@ ..
800003a0:	00000000 80002040 00000000 80002040     ....@ ......@ ..
800003b0:	00000000 80002040 00000000 80002040     ....@ ......@ ..
800003c0:	00000000 80002040 00000000 80002040     ....@ ......@ ..
800003d0:	00000000 80002040 00000000 80002040     ....@ ......@ ..
800003e0:	00000000 80002040 00000000 80002040     ....@ ......@ ..
800003f0:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000400:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000410:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000420:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000430:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000440:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000450:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000460:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000470:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000480:	00000000 80002040 00000000 80002040     ....@ ......@ ..
80000490:	00000000 80002040 00000000 80002040     ....@ ......@ ..
800004a0:	00000000 80002040                       ....@ ..

800004a8 <__ffssi2>:
800004a8:	06050463          	beqz	a0,80000510 <__ffssi2+0x68>
800004ac:	40a007b3          	neg	a5,a0
800004b0:	00a7f533          	and	a0,a5,a0
800004b4:	000107b7          	lui	a5,0x10
800004b8:	02f57663          	bleu	a5,a0,800004e4 <__ffssi2+0x3c>
800004bc:	0ff00793          	li	a5,255
800004c0:	00a7b7b3          	sltu	a5,a5,a0
800004c4:	00379793          	slli	a5,a5,0x3
800004c8:	80003737          	lui	a4,0x80003
800004cc:	00f55533          	srl	a0,a0,a5
800004d0:	ddc70713          	addi	a4,a4,-548 # 80002ddc <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002ddd>
800004d4:	00e50533          	add	a0,a0,a4
800004d8:	00054503          	lbu	a0,0(a0)
800004dc:	00f50533          	add	a0,a0,a5
800004e0:	00008067          	ret
800004e4:	01000737          	lui	a4,0x1000
800004e8:	01000793          	li	a5,16
800004ec:	fce56ee3          	bltu	a0,a4,800004c8 <__ffssi2+0x20>
800004f0:	01800793          	li	a5,24
800004f4:	80003737          	lui	a4,0x80003
800004f8:	00f55533          	srl	a0,a0,a5
800004fc:	ddc70713          	addi	a4,a4,-548 # 80002ddc <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002ddd>
80000500:	00e50533          	add	a0,a0,a4
80000504:	00054503          	lbu	a0,0(a0)
80000508:	00f50533          	add	a0,a0,a5
8000050c:	00008067          	ret
80000510:	00000513          	li	a0,0
80000514:	00008067          	ret

80000518 <__udivdi3>:
80000518:	00068313          	mv	t1,a3
8000051c:	00060893          	mv	a7,a2
80000520:	00050e13          	mv	t3,a0
80000524:	00058813          	mv	a6,a1
80000528:	0c069e63          	bnez	a3,80000604 <__udivdi3+0xec>
8000052c:	12c5f863          	bleu	a2,a1,8000065c <__udivdi3+0x144>
80000530:	000107b7          	lui	a5,0x10
80000534:	22f67663          	bleu	a5,a2,80000760 <__udivdi3+0x248>
80000538:	0ff00793          	li	a5,255
8000053c:	00c7f463          	bleu	a2,a5,80000544 <__udivdi3+0x2c>
80000540:	00800313          	li	t1,8
80000544:	80003737          	lui	a4,0x80003
80000548:	006657b3          	srl	a5,a2,t1
8000054c:	ddc70713          	addi	a4,a4,-548 # 80002ddc <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002ddd>
80000550:	00e787b3          	add	a5,a5,a4
80000554:	0007c783          	lbu	a5,0(a5) # 10000 <CONFIG_RISCV_RAM_SIZE>
80000558:	00678333          	add	t1,a5,t1
8000055c:	02000793          	li	a5,32
80000560:	406787b3          	sub	a5,a5,t1
80000564:	00078c63          	beqz	a5,8000057c <__udivdi3+0x64>
80000568:	00f59733          	sll	a4,a1,a5
8000056c:	00655333          	srl	t1,a0,t1
80000570:	00f618b3          	sll	a7,a2,a5
80000574:	00e36833          	or	a6,t1,a4
80000578:	00f51e33          	sll	t3,a0,a5
8000057c:	0108d593          	srli	a1,a7,0x10
80000580:	02b85733          	divu	a4,a6,a1
80000584:	01089613          	slli	a2,a7,0x10
80000588:	01065613          	srli	a2,a2,0x10
8000058c:	010e5793          	srli	a5,t3,0x10
80000590:	02b876b3          	remu	a3,a6,a1
80000594:	02e60533          	mul	a0,a2,a4
80000598:	01069693          	slli	a3,a3,0x10
8000059c:	00f6e833          	or	a6,a3,a5
800005a0:	00a87c63          	bleu	a0,a6,800005b8 <__udivdi3+0xa0>
800005a4:	01180833          	add	a6,a6,a7
800005a8:	fff70793          	addi	a5,a4,-1
800005ac:	01186463          	bltu	a6,a7,800005b4 <__udivdi3+0x9c>
800005b0:	3ca86863          	bltu	a6,a0,80000980 <__udivdi3+0x468>
800005b4:	00078713          	mv	a4,a5
800005b8:	40a80833          	sub	a6,a6,a0
800005bc:	02b85533          	divu	a0,a6,a1
800005c0:	010e1e13          	slli	t3,t3,0x10
800005c4:	010e5e13          	srli	t3,t3,0x10
800005c8:	02b87833          	remu	a6,a6,a1
800005cc:	02a60633          	mul	a2,a2,a0
800005d0:	01081813          	slli	a6,a6,0x10
800005d4:	01c86833          	or	a6,a6,t3
800005d8:	00c87c63          	bleu	a2,a6,800005f0 <__udivdi3+0xd8>
800005dc:	01088833          	add	a6,a7,a6
800005e0:	fff50793          	addi	a5,a0,-1
800005e4:	33186663          	bltu	a6,a7,80000910 <__udivdi3+0x3f8>
800005e8:	ffe50513          	addi	a0,a0,-2
800005ec:	32c87263          	bleu	a2,a6,80000910 <__udivdi3+0x3f8>
800005f0:	01071793          	slli	a5,a4,0x10
800005f4:	00a7e7b3          	or	a5,a5,a0
800005f8:	00000593          	li	a1,0
800005fc:	00078513          	mv	a0,a5
80000600:	00008067          	ret
80000604:	12d5e663          	bltu	a1,a3,80000730 <__udivdi3+0x218>
80000608:	000107b7          	lui	a5,0x10
8000060c:	12f6ea63          	bltu	a3,a5,80000740 <__udivdi3+0x228>
80000610:	01000737          	lui	a4,0x1000
80000614:	01800793          	li	a5,24
80000618:	00e6f463          	bleu	a4,a3,80000620 <__udivdi3+0x108>
8000061c:	01000793          	li	a5,16
80000620:	800038b7          	lui	a7,0x80003
80000624:	00f6d733          	srl	a4,a3,a5
80000628:	ddc88893          	addi	a7,a7,-548 # 80002ddc <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002ddd>
8000062c:	01170733          	add	a4,a4,a7
80000630:	00074e03          	lbu	t3,0(a4) # 1000000 <CONFIG_RISCV_ROM_SIZE+0x400000>
80000634:	02000e93          	li	t4,32
80000638:	00fe0e33          	add	t3,t3,a5
8000063c:	41ce8eb3          	sub	t4,t4,t3
80000640:	120e9a63          	bnez	t4,80000774 <__udivdi3+0x25c>
80000644:	00000593          	li	a1,0
80000648:	00100793          	li	a5,1
8000064c:	0f036663          	bltu	t1,a6,80000738 <__udivdi3+0x220>
80000650:	00c537b3          	sltu	a5,a0,a2
80000654:	0017c793          	xori	a5,a5,1
80000658:	0e00006f          	j	80000738 <__udivdi3+0x220>
8000065c:	00061663          	bnez	a2,80000668 <__udivdi3+0x150>
80000660:	00100893          	li	a7,1
80000664:	02c8d8b3          	divu	a7,a7,a2
80000668:	000107b7          	lui	a5,0x10
8000066c:	0ef8e263          	bltu	a7,a5,80000750 <__udivdi3+0x238>
80000670:	010007b7          	lui	a5,0x1000
80000674:	01800313          	li	t1,24
80000678:	00f8f463          	bleu	a5,a7,80000680 <__udivdi3+0x168>
8000067c:	01000313          	li	t1,16
80000680:	80003737          	lui	a4,0x80003
80000684:	0068d7b3          	srl	a5,a7,t1
80000688:	ddc70713          	addi	a4,a4,-548 # 80002ddc <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002ddd>
8000068c:	00e787b3          	add	a5,a5,a4
80000690:	0007c783          	lbu	a5,0(a5) # 1000000 <CONFIG_RISCV_ROM_SIZE+0x400000>
80000694:	00678333          	add	t1,a5,t1
80000698:	02000793          	li	a5,32
8000069c:	406787b3          	sub	a5,a5,t1
800006a0:	1c079263          	bnez	a5,80000864 <__udivdi3+0x34c>
800006a4:	01089f13          	slli	t5,a7,0x10
800006a8:	41158733          	sub	a4,a1,a7
800006ac:	0108de93          	srli	t4,a7,0x10
800006b0:	010f5f13          	srli	t5,t5,0x10
800006b4:	00100593          	li	a1,1
800006b8:	010e5793          	srli	a5,t3,0x10
800006bc:	03d756b3          	divu	a3,a4,t4
800006c0:	03d77733          	remu	a4,a4,t4
800006c4:	03e68633          	mul	a2,a3,t5
800006c8:	01071713          	slli	a4,a4,0x10
800006cc:	00f767b3          	or	a5,a4,a5
800006d0:	00c7fc63          	bleu	a2,a5,800006e8 <__udivdi3+0x1d0>
800006d4:	011787b3          	add	a5,a5,a7
800006d8:	fff68713          	addi	a4,a3,-1
800006dc:	0117e463          	bltu	a5,a7,800006e4 <__udivdi3+0x1cc>
800006e0:	28c7ea63          	bltu	a5,a2,80000974 <__udivdi3+0x45c>
800006e4:	00070693          	mv	a3,a4
800006e8:	40c787b3          	sub	a5,a5,a2
800006ec:	03d7d533          	divu	a0,a5,t4
800006f0:	010e1e13          	slli	t3,t3,0x10
800006f4:	010e5e13          	srli	t3,t3,0x10
800006f8:	03d7f7b3          	remu	a5,a5,t4
800006fc:	03e50f33          	mul	t5,a0,t5
80000700:	01079793          	slli	a5,a5,0x10
80000704:	01c7e7b3          	or	a5,a5,t3
80000708:	01e7fc63          	bleu	t5,a5,80000720 <__udivdi3+0x208>
8000070c:	00f887b3          	add	a5,a7,a5
80000710:	fff50713          	addi	a4,a0,-1
80000714:	1f17ea63          	bltu	a5,a7,80000908 <__udivdi3+0x3f0>
80000718:	ffe50513          	addi	a0,a0,-2
8000071c:	1fe7f663          	bleu	t5,a5,80000908 <__udivdi3+0x3f0>
80000720:	01069793          	slli	a5,a3,0x10
80000724:	00a7e7b3          	or	a5,a5,a0
80000728:	00078513          	mv	a0,a5
8000072c:	00008067          	ret
80000730:	00000593          	li	a1,0
80000734:	00000793          	li	a5,0
80000738:	00078513          	mv	a0,a5
8000073c:	00008067          	ret
80000740:	0ff00e13          	li	t3,255
80000744:	00de37b3          	sltu	a5,t3,a3
80000748:	00379793          	slli	a5,a5,0x3
8000074c:	ed5ff06f          	j	80000620 <__udivdi3+0x108>
80000750:	0ff00793          	li	a5,255
80000754:	f317f6e3          	bleu	a7,a5,80000680 <__udivdi3+0x168>
80000758:	00800313          	li	t1,8
8000075c:	f25ff06f          	j	80000680 <__udivdi3+0x168>
80000760:	010007b7          	lui	a5,0x1000
80000764:	01800313          	li	t1,24
80000768:	dcf67ee3          	bleu	a5,a2,80000544 <__udivdi3+0x2c>
8000076c:	01000313          	li	t1,16
80000770:	dd5ff06f          	j	80000544 <__udivdi3+0x2c>
80000774:	01c65833          	srl	a6,a2,t3
80000778:	01d696b3          	sll	a3,a3,t4
8000077c:	00d86833          	or	a6,a6,a3
80000780:	01c5d8b3          	srl	a7,a1,t3
80000784:	01085f13          	srli	t5,a6,0x10
80000788:	03e8d333          	divu	t1,a7,t5
8000078c:	01081713          	slli	a4,a6,0x10
80000790:	01075713          	srli	a4,a4,0x10
80000794:	01d595b3          	sll	a1,a1,t4
80000798:	01c55e33          	srl	t3,a0,t3
8000079c:	00be65b3          	or	a1,t3,a1
800007a0:	0105d693          	srli	a3,a1,0x10
800007a4:	01d61633          	sll	a2,a2,t4
800007a8:	03e8f8b3          	remu	a7,a7,t5
800007ac:	026707b3          	mul	a5,a4,t1
800007b0:	01089893          	slli	a7,a7,0x10
800007b4:	00d8e6b3          	or	a3,a7,a3
800007b8:	00f6fa63          	bleu	a5,a3,800007cc <__udivdi3+0x2b4>
800007bc:	010686b3          	add	a3,a3,a6
800007c0:	fff30893          	addi	a7,t1,-1
800007c4:	1906f863          	bleu	a6,a3,80000954 <__udivdi3+0x43c>
800007c8:	00088313          	mv	t1,a7
800007cc:	40f686b3          	sub	a3,a3,a5
800007d0:	03e6de33          	divu	t3,a3,t5
800007d4:	01059593          	slli	a1,a1,0x10
800007d8:	0105d593          	srli	a1,a1,0x10
800007dc:	03e6f6b3          	remu	a3,a3,t5
800007e0:	03c708b3          	mul	a7,a4,t3
800007e4:	01069693          	slli	a3,a3,0x10
800007e8:	00b6e733          	or	a4,a3,a1
800007ec:	01177a63          	bleu	a7,a4,80000800 <__udivdi3+0x2e8>
800007f0:	01070733          	add	a4,a4,a6
800007f4:	fffe0793          	addi	a5,t3,-1
800007f8:	15077663          	bleu	a6,a4,80000944 <__udivdi3+0x42c>
800007fc:	00078e13          	mv	t3,a5
80000800:	01031793          	slli	a5,t1,0x10
80000804:	00010f37          	lui	t5,0x10
80000808:	01c7e7b3          	or	a5,a5,t3
8000080c:	ffff0693          	addi	a3,t5,-1 # ffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7fed>
80000810:	00d7f5b3          	and	a1,a5,a3
80000814:	0107d313          	srli	t1,a5,0x10
80000818:	00d676b3          	and	a3,a2,a3
8000081c:	01065613          	srli	a2,a2,0x10
80000820:	02d58e33          	mul	t3,a1,a3
80000824:	41170733          	sub	a4,a4,a7
80000828:	02c585b3          	mul	a1,a1,a2
8000082c:	010e5813          	srli	a6,t3,0x10
80000830:	02d306b3          	mul	a3,t1,a3
80000834:	00d585b3          	add	a1,a1,a3
80000838:	00b805b3          	add	a1,a6,a1
8000083c:	02c30633          	mul	a2,t1,a2
80000840:	00d5f463          	bleu	a3,a1,80000848 <__udivdi3+0x330>
80000844:	01e60633          	add	a2,a2,t5
80000848:	0105d693          	srli	a3,a1,0x10
8000084c:	00c68633          	add	a2,a3,a2
80000850:	0ec76463          	bltu	a4,a2,80000938 <__udivdi3+0x420>
80000854:	0cc70263          	beq	a4,a2,80000918 <__udivdi3+0x400>
80000858:	00000593          	li	a1,0
8000085c:	00078513          	mv	a0,a5
80000860:	00008067          	ret
80000864:	00f898b3          	sll	a7,a7,a5
80000868:	0065d633          	srl	a2,a1,t1
8000086c:	0108de93          	srli	t4,a7,0x10
80000870:	03d65fb3          	divu	t6,a2,t4
80000874:	01089f13          	slli	t5,a7,0x10
80000878:	010f5f13          	srli	t5,t5,0x10
8000087c:	00f59733          	sll	a4,a1,a5
80000880:	00f51e33          	sll	t3,a0,a5
80000884:	00655333          	srl	t1,a0,t1
80000888:	00e36733          	or	a4,t1,a4
8000088c:	01075593          	srli	a1,a4,0x10
80000890:	03d676b3          	remu	a3,a2,t4
80000894:	03ff07b3          	mul	a5,t5,t6
80000898:	01069693          	slli	a3,a3,0x10
8000089c:	00b6e6b3          	or	a3,a3,a1
800008a0:	00f6fe63          	bleu	a5,a3,800008bc <__udivdi3+0x3a4>
800008a4:	011686b3          	add	a3,a3,a7
800008a8:	ffff8613          	addi	a2,t6,-1
800008ac:	0d16e063          	bltu	a3,a7,8000096c <__udivdi3+0x454>
800008b0:	0af6fe63          	bleu	a5,a3,8000096c <__udivdi3+0x454>
800008b4:	ffef8f93          	addi	t6,t6,-2
800008b8:	011686b3          	add	a3,a3,a7
800008bc:	40f686b3          	sub	a3,a3,a5
800008c0:	03d6d7b3          	divu	a5,a3,t4
800008c4:	01071313          	slli	t1,a4,0x10
800008c8:	01035313          	srli	t1,t1,0x10
800008cc:	03d6f6b3          	remu	a3,a3,t4
800008d0:	02ff0633          	mul	a2,t5,a5
800008d4:	01069713          	slli	a4,a3,0x10
800008d8:	00676733          	or	a4,a4,t1
800008dc:	00c77e63          	bleu	a2,a4,800008f8 <__udivdi3+0x3e0>
800008e0:	01170733          	add	a4,a4,a7
800008e4:	fff78693          	addi	a3,a5,-1 # ffffff <CONFIG_RISCV_ROM_SIZE+0x3fffff>
800008e8:	07176e63          	bltu	a4,a7,80000964 <__udivdi3+0x44c>
800008ec:	06c77c63          	bleu	a2,a4,80000964 <__udivdi3+0x44c>
800008f0:	ffe78793          	addi	a5,a5,-2
800008f4:	01170733          	add	a4,a4,a7
800008f8:	010f9593          	slli	a1,t6,0x10
800008fc:	40c70733          	sub	a4,a4,a2
80000900:	00f5e5b3          	or	a1,a1,a5
80000904:	db5ff06f          	j	800006b8 <__udivdi3+0x1a0>
80000908:	00070513          	mv	a0,a4
8000090c:	e15ff06f          	j	80000720 <__udivdi3+0x208>
80000910:	00078513          	mv	a0,a5
80000914:	cddff06f          	j	800005f0 <__udivdi3+0xd8>
80000918:	000106b7          	lui	a3,0x10
8000091c:	fff68693          	addi	a3,a3,-1 # ffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7fed>
80000920:	00d5f733          	and	a4,a1,a3
80000924:	01071713          	slli	a4,a4,0x10
80000928:	00de7e33          	and	t3,t3,a3
8000092c:	01d51533          	sll	a0,a0,t4
80000930:	01c70733          	add	a4,a4,t3
80000934:	f2e572e3          	bleu	a4,a0,80000858 <__udivdi3+0x340>
80000938:	fff78793          	addi	a5,a5,-1
8000093c:	00000593          	li	a1,0
80000940:	f1dff06f          	j	8000085c <__udivdi3+0x344>
80000944:	eb177ce3          	bleu	a7,a4,800007fc <__udivdi3+0x2e4>
80000948:	ffee0e13          	addi	t3,t3,-2
8000094c:	01070733          	add	a4,a4,a6
80000950:	eb1ff06f          	j	80000800 <__udivdi3+0x2e8>
80000954:	e6f6fae3          	bleu	a5,a3,800007c8 <__udivdi3+0x2b0>
80000958:	ffe30313          	addi	t1,t1,-2
8000095c:	010686b3          	add	a3,a3,a6
80000960:	e6dff06f          	j	800007cc <__udivdi3+0x2b4>
80000964:	00068793          	mv	a5,a3
80000968:	f91ff06f          	j	800008f8 <__udivdi3+0x3e0>
8000096c:	00060f93          	mv	t6,a2
80000970:	f4dff06f          	j	800008bc <__udivdi3+0x3a4>
80000974:	ffe68693          	addi	a3,a3,-2
80000978:	011787b3          	add	a5,a5,a7
8000097c:	d6dff06f          	j	800006e8 <__udivdi3+0x1d0>
80000980:	ffe70713          	addi	a4,a4,-2
80000984:	01180833          	add	a6,a6,a7
80000988:	c31ff06f          	j	800005b8 <__udivdi3+0xa0>

8000098c <__umoddi3>:
8000098c:	00068893          	mv	a7,a3
80000990:	00060813          	mv	a6,a2
80000994:	00050e93          	mv	t4,a0
80000998:	00058313          	mv	t1,a1
8000099c:	0c069863          	bnez	a3,80000a6c <__umoddi3+0xe0>
800009a0:	12c5fa63          	bleu	a2,a1,80000ad4 <__umoddi3+0x148>
800009a4:	000107b7          	lui	a5,0x10
800009a8:	1ef66c63          	bltu	a2,a5,80000ba0 <__umoddi3+0x214>
800009ac:	010007b7          	lui	a5,0x1000
800009b0:	01800893          	li	a7,24
800009b4:	00f67463          	bleu	a5,a2,800009bc <__umoddi3+0x30>
800009b8:	01000893          	li	a7,16
800009bc:	80003737          	lui	a4,0x80003
800009c0:	011657b3          	srl	a5,a2,a7
800009c4:	ddc70713          	addi	a4,a4,-548 # 80002ddc <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002ddd>
800009c8:	00e787b3          	add	a5,a5,a4
800009cc:	0007c783          	lbu	a5,0(a5) # 1000000 <CONFIG_RISCV_ROM_SIZE+0x400000>
800009d0:	02000e13          	li	t3,32
800009d4:	011788b3          	add	a7,a5,a7
800009d8:	411e0e33          	sub	t3,t3,a7
800009dc:	000e0c63          	beqz	t3,800009f4 <__umoddi3+0x68>
800009e0:	01c595b3          	sll	a1,a1,t3
800009e4:	011558b3          	srl	a7,a0,a7
800009e8:	01c61833          	sll	a6,a2,t3
800009ec:	00b8e333          	or	t1,a7,a1
800009f0:	01c51eb3          	sll	t4,a0,t3
800009f4:	01085613          	srli	a2,a6,0x10
800009f8:	02c357b3          	divu	a5,t1,a2
800009fc:	01081513          	slli	a0,a6,0x10
80000a00:	01055513          	srli	a0,a0,0x10
80000a04:	010ed713          	srli	a4,t4,0x10
80000a08:	02c376b3          	remu	a3,t1,a2
80000a0c:	02f507b3          	mul	a5,a0,a5
80000a10:	01069693          	slli	a3,a3,0x10
80000a14:	00e6e733          	or	a4,a3,a4
80000a18:	00f77863          	bleu	a5,a4,80000a28 <__umoddi3+0x9c>
80000a1c:	01070733          	add	a4,a4,a6
80000a20:	01076463          	bltu	a4,a6,80000a28 <__umoddi3+0x9c>
80000a24:	36f76c63          	bltu	a4,a5,80000d9c <__umoddi3+0x410>
80000a28:	40f70733          	sub	a4,a4,a5
80000a2c:	02c756b3          	divu	a3,a4,a2
80000a30:	010e9793          	slli	a5,t4,0x10
80000a34:	0107d793          	srli	a5,a5,0x10
80000a38:	02c77733          	remu	a4,a4,a2
80000a3c:	02d50533          	mul	a0,a0,a3
80000a40:	01071713          	slli	a4,a4,0x10
80000a44:	00f767b3          	or	a5,a4,a5
80000a48:	00a7fa63          	bleu	a0,a5,80000a5c <__umoddi3+0xd0>
80000a4c:	010787b3          	add	a5,a5,a6
80000a50:	0107e663          	bltu	a5,a6,80000a5c <__umoddi3+0xd0>
80000a54:	00a7f463          	bleu	a0,a5,80000a5c <__umoddi3+0xd0>
80000a58:	010787b3          	add	a5,a5,a6
80000a5c:	40a78533          	sub	a0,a5,a0
80000a60:	01c55533          	srl	a0,a0,t3
80000a64:	00000593          	li	a1,0
80000a68:	00008067          	ret
80000a6c:	fed5eee3          	bltu	a1,a3,80000a68 <__umoddi3+0xdc>
80000a70:	000107b7          	lui	a5,0x10
80000a74:	10f6e663          	bltu	a3,a5,80000b80 <__umoddi3+0x1f4>
80000a78:	01000737          	lui	a4,0x1000
80000a7c:	01800793          	li	a5,24
80000a80:	00e6f463          	bleu	a4,a3,80000a88 <__umoddi3+0xfc>
80000a84:	01000793          	li	a5,16
80000a88:	80003e37          	lui	t3,0x80003
80000a8c:	ddce0e13          	addi	t3,t3,-548 # 80002ddc <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002ddd>
80000a90:	00f6d733          	srl	a4,a3,a5
80000a94:	01c70733          	add	a4,a4,t3
80000a98:	00074f03          	lbu	t5,0(a4) # 1000000 <CONFIG_RISCV_ROM_SIZE+0x400000>
80000a9c:	02000e13          	li	t3,32
80000aa0:	00ff0f33          	add	t5,t5,a5
80000aa4:	41ee0e33          	sub	t3,t3,t5
80000aa8:	100e1463          	bnez	t3,80000bb0 <__umoddi3+0x224>
80000aac:	0068e663          	bltu	a7,t1,80000ab8 <__umoddi3+0x12c>
80000ab0:	00050793          	mv	a5,a0
80000ab4:	010eea63          	bltu	t4,a6,80000ac8 <__umoddi3+0x13c>
80000ab8:	40c507b3          	sub	a5,a0,a2
80000abc:	40d585b3          	sub	a1,a1,a3
80000ac0:	00f536b3          	sltu	a3,a0,a5
80000ac4:	40d58333          	sub	t1,a1,a3
80000ac8:	00078513          	mv	a0,a5
80000acc:	00030593          	mv	a1,t1
80000ad0:	00008067          	ret
80000ad4:	00061663          	bnez	a2,80000ae0 <__umoddi3+0x154>
80000ad8:	00100813          	li	a6,1
80000adc:	02c85833          	divu	a6,a6,a2
80000ae0:	000107b7          	lui	a5,0x10
80000ae4:	0af86663          	bltu	a6,a5,80000b90 <__umoddi3+0x204>
80000ae8:	010007b7          	lui	a5,0x1000
80000aec:	01800893          	li	a7,24
80000af0:	00f87463          	bleu	a5,a6,80000af8 <__umoddi3+0x16c>
80000af4:	01000893          	li	a7,16
80000af8:	80003737          	lui	a4,0x80003
80000afc:	011857b3          	srl	a5,a6,a7
80000b00:	ddc70713          	addi	a4,a4,-548 # 80002ddc <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002ddd>
80000b04:	00e787b3          	add	a5,a5,a4
80000b08:	0007c783          	lbu	a5,0(a5) # 1000000 <CONFIG_RISCV_ROM_SIZE+0x400000>
80000b0c:	02000e13          	li	t3,32
80000b10:	011788b3          	add	a7,a5,a7
80000b14:	411e0e33          	sub	t3,t3,a7
80000b18:	1c0e1063          	bnez	t3,80000cd8 <__umoddi3+0x34c>
80000b1c:	01081793          	slli	a5,a6,0x10
80000b20:	410585b3          	sub	a1,a1,a6
80000b24:	01085613          	srli	a2,a6,0x10
80000b28:	0107d793          	srli	a5,a5,0x10
80000b2c:	010ed713          	srli	a4,t4,0x10
80000b30:	02c5d6b3          	divu	a3,a1,a2
80000b34:	02c5f5b3          	remu	a1,a1,a2
80000b38:	02f686b3          	mul	a3,a3,a5
80000b3c:	01059593          	slli	a1,a1,0x10
80000b40:	00e5e733          	or	a4,a1,a4
80000b44:	00d77a63          	bleu	a3,a4,80000b58 <__umoddi3+0x1cc>
80000b48:	01070733          	add	a4,a4,a6
80000b4c:	01076663          	bltu	a4,a6,80000b58 <__umoddi3+0x1cc>
80000b50:	00d77463          	bleu	a3,a4,80000b58 <__umoddi3+0x1cc>
80000b54:	01070733          	add	a4,a4,a6
80000b58:	40d70733          	sub	a4,a4,a3
80000b5c:	02c75533          	divu	a0,a4,a2
80000b60:	010e9e93          	slli	t4,t4,0x10
80000b64:	010ede93          	srli	t4,t4,0x10
80000b68:	02c77733          	remu	a4,a4,a2
80000b6c:	02f50533          	mul	a0,a0,a5
80000b70:	01071713          	slli	a4,a4,0x10
80000b74:	01d767b3          	or	a5,a4,t4
80000b78:	eea7f2e3          	bleu	a0,a5,80000a5c <__umoddi3+0xd0>
80000b7c:	ed1ff06f          	j	80000a4c <__umoddi3+0xc0>
80000b80:	0ff00f13          	li	t5,255
80000b84:	00df37b3          	sltu	a5,t5,a3
80000b88:	00379793          	slli	a5,a5,0x3
80000b8c:	efdff06f          	j	80000a88 <__umoddi3+0xfc>
80000b90:	0ff00793          	li	a5,255
80000b94:	f707f2e3          	bleu	a6,a5,80000af8 <__umoddi3+0x16c>
80000b98:	00800893          	li	a7,8
80000b9c:	f5dff06f          	j	80000af8 <__umoddi3+0x16c>
80000ba0:	0ff00793          	li	a5,255
80000ba4:	e0c7fce3          	bleu	a2,a5,800009bc <__umoddi3+0x30>
80000ba8:	00800893          	li	a7,8
80000bac:	e11ff06f          	j	800009bc <__umoddi3+0x30>
80000bb0:	01e657b3          	srl	a5,a2,t5
80000bb4:	01c696b3          	sll	a3,a3,t3
80000bb8:	00d7e6b3          	or	a3,a5,a3
80000bbc:	01e5d8b3          	srl	a7,a1,t5
80000bc0:	0106d713          	srli	a4,a3,0x10
80000bc4:	02e8d333          	divu	t1,a7,a4
80000bc8:	01069f93          	slli	t6,a3,0x10
80000bcc:	01e557b3          	srl	a5,a0,t5
80000bd0:	010fdf93          	srli	t6,t6,0x10
80000bd4:	01c595b3          	sll	a1,a1,t3
80000bd8:	00b7e5b3          	or	a1,a5,a1
80000bdc:	01c617b3          	sll	a5,a2,t3
80000be0:	0105d813          	srli	a6,a1,0x10
80000be4:	01c51533          	sll	a0,a0,t3
80000be8:	02e8f8b3          	remu	a7,a7,a4
80000bec:	026f8633          	mul	a2,t6,t1
80000bf0:	01089893          	slli	a7,a7,0x10
80000bf4:	0108e833          	or	a6,a7,a6
80000bf8:	00c87a63          	bleu	a2,a6,80000c0c <__umoddi3+0x280>
80000bfc:	00d80833          	add	a6,a6,a3
80000c00:	fff30893          	addi	a7,t1,-1
80000c04:	18d87463          	bleu	a3,a6,80000d8c <__umoddi3+0x400>
80000c08:	00088313          	mv	t1,a7
80000c0c:	40c80833          	sub	a6,a6,a2
80000c10:	02e85633          	divu	a2,a6,a4
80000c14:	01059593          	slli	a1,a1,0x10
80000c18:	0105d593          	srli	a1,a1,0x10
80000c1c:	02e87833          	remu	a6,a6,a4
80000c20:	02cf8fb3          	mul	t6,t6,a2
80000c24:	01081713          	slli	a4,a6,0x10
80000c28:	00b76733          	or	a4,a4,a1
80000c2c:	01f77a63          	bleu	t6,a4,80000c40 <__umoddi3+0x2b4>
80000c30:	00d70733          	add	a4,a4,a3
80000c34:	fff60593          	addi	a1,a2,-1
80000c38:	14d77263          	bleu	a3,a4,80000d7c <__umoddi3+0x3f0>
80000c3c:	00058613          	mv	a2,a1
80000c40:	01031313          	slli	t1,t1,0x10
80000c44:	000105b7          	lui	a1,0x10
80000c48:	00c36333          	or	t1,t1,a2
80000c4c:	fff58893          	addi	a7,a1,-1 # ffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7fed>
80000c50:	01137eb3          	and	t4,t1,a7
80000c54:	0107d613          	srli	a2,a5,0x10
80000c58:	01035313          	srli	t1,t1,0x10
80000c5c:	0117f8b3          	and	a7,a5,a7
80000c60:	031e82b3          	mul	t0,t4,a7
80000c64:	41f70733          	sub	a4,a4,t6
80000c68:	02ce8eb3          	mul	t4,t4,a2
80000c6c:	0102d813          	srli	a6,t0,0x10
80000c70:	031308b3          	mul	a7,t1,a7
80000c74:	011e8eb3          	add	t4,t4,a7
80000c78:	01d80833          	add	a6,a6,t4
80000c7c:	02c30633          	mul	a2,t1,a2
80000c80:	01187463          	bleu	a7,a6,80000c88 <__umoddi3+0x2fc>
80000c84:	00b60633          	add	a2,a2,a1
80000c88:	000108b7          	lui	a7,0x10
80000c8c:	fff88893          	addi	a7,a7,-1 # ffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7fed>
80000c90:	01085593          	srli	a1,a6,0x10
80000c94:	01187833          	and	a6,a6,a7
80000c98:	01081813          	slli	a6,a6,0x10
80000c9c:	0112f2b3          	and	t0,t0,a7
80000ca0:	00c58633          	add	a2,a1,a2
80000ca4:	00580833          	add	a6,a6,t0
80000ca8:	0ac76e63          	bltu	a4,a2,80000d64 <__umoddi3+0x3d8>
80000cac:	0ec70c63          	beq	a4,a2,80000da4 <__umoddi3+0x418>
80000cb0:	40c705b3          	sub	a1,a4,a2
80000cb4:	00080793          	mv	a5,a6
80000cb8:	40f507b3          	sub	a5,a0,a5
80000cbc:	00f53533          	sltu	a0,a0,a5
80000cc0:	40a585b3          	sub	a1,a1,a0
80000cc4:	01e59f33          	sll	t5,a1,t5
80000cc8:	01c7d533          	srl	a0,a5,t3
80000ccc:	00af6533          	or	a0,t5,a0
80000cd0:	01c5d5b3          	srl	a1,a1,t3
80000cd4:	00008067          	ret
80000cd8:	01c81833          	sll	a6,a6,t3
80000cdc:	0115d733          	srl	a4,a1,a7
80000ce0:	01085613          	srli	a2,a6,0x10
80000ce4:	02c756b3          	divu	a3,a4,a2
80000ce8:	01081793          	slli	a5,a6,0x10
80000cec:	0107d793          	srli	a5,a5,0x10
80000cf0:	011558b3          	srl	a7,a0,a7
80000cf4:	01c51eb3          	sll	t4,a0,t3
80000cf8:	01c595b3          	sll	a1,a1,t3
80000cfc:	00b8e5b3          	or	a1,a7,a1
80000d00:	0105d893          	srli	a7,a1,0x10
80000d04:	02c77733          	remu	a4,a4,a2
80000d08:	02d78533          	mul	a0,a5,a3
80000d0c:	01071693          	slli	a3,a4,0x10
80000d10:	0116e6b3          	or	a3,a3,a7
80000d14:	00a6fa63          	bleu	a0,a3,80000d28 <__umoddi3+0x39c>
80000d18:	010686b3          	add	a3,a3,a6
80000d1c:	0106e663          	bltu	a3,a6,80000d28 <__umoddi3+0x39c>
80000d20:	00a6f463          	bleu	a0,a3,80000d28 <__umoddi3+0x39c>
80000d24:	010686b3          	add	a3,a3,a6
80000d28:	40a686b3          	sub	a3,a3,a0
80000d2c:	02c6d733          	divu	a4,a3,a2
80000d30:	01059893          	slli	a7,a1,0x10
80000d34:	0108d893          	srli	a7,a7,0x10
80000d38:	02c6f6b3          	remu	a3,a3,a2
80000d3c:	02e78733          	mul	a4,a5,a4
80000d40:	01069593          	slli	a1,a3,0x10
80000d44:	0115e5b3          	or	a1,a1,a7
80000d48:	00e5fa63          	bleu	a4,a1,80000d5c <__umoddi3+0x3d0>
80000d4c:	010585b3          	add	a1,a1,a6
80000d50:	0105e663          	bltu	a1,a6,80000d5c <__umoddi3+0x3d0>
80000d54:	00e5f463          	bleu	a4,a1,80000d5c <__umoddi3+0x3d0>
80000d58:	010585b3          	add	a1,a1,a6
80000d5c:	40e585b3          	sub	a1,a1,a4
80000d60:	dcdff06f          	j	80000b2c <__umoddi3+0x1a0>
80000d64:	40f807b3          	sub	a5,a6,a5
80000d68:	40d605b3          	sub	a1,a2,a3
80000d6c:	00f83833          	sltu	a6,a6,a5
80000d70:	410585b3          	sub	a1,a1,a6
80000d74:	40b705b3          	sub	a1,a4,a1
80000d78:	f41ff06f          	j	80000cb8 <__umoddi3+0x32c>
80000d7c:	edf770e3          	bleu	t6,a4,80000c3c <__umoddi3+0x2b0>
80000d80:	ffe60613          	addi	a2,a2,-2
80000d84:	00d70733          	add	a4,a4,a3
80000d88:	eb9ff06f          	j	80000c40 <__umoddi3+0x2b4>
80000d8c:	e6c87ee3          	bleu	a2,a6,80000c08 <__umoddi3+0x27c>
80000d90:	ffe30313          	addi	t1,t1,-2
80000d94:	00d80833          	add	a6,a6,a3
80000d98:	e75ff06f          	j	80000c0c <__umoddi3+0x280>
80000d9c:	01070733          	add	a4,a4,a6
80000da0:	c89ff06f          	j	80000a28 <__umoddi3+0x9c>
80000da4:	fd0560e3          	bltu	a0,a6,80000d64 <__umoddi3+0x3d8>
80000da8:	00080793          	mv	a5,a6
80000dac:	00000593          	li	a1,0
80000db0:	f09ff06f          	j	80000cb8 <__umoddi3+0x32c>

80000db4 <main>:
}

int main(void){	

    // Attention: what happens if usual serial driver registered as console driver?
	printk("Hello world! \n");
80000db4:	80003537          	lui	a0,0x80003
int main(void){	
80000db8:	ff010113          	addi	sp,sp,-16
	printk("Hello world! \n");
80000dbc:	edc50513          	addi	a0,a0,-292 # 80002edc <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002edd>
int main(void){	
80000dc0:	00112623          	sw	ra,12(sp)
	printk("Hello world! \n");
80000dc4:	779000ef          	jal	ra,80001d3c <printk>
	//print_device_drivers();
	return 2;
80000dc8:	00c12083          	lw	ra,12(sp)
80000dcc:	00200513          	li	a0,2
80000dd0:	01010113          	addi	sp,sp,16
80000dd4:	00008067          	ret

size_t strlen_2(const char *s)
{
  const char *p = s;
  while (*p)
    p++;
80000dd8:	80003537          	lui	a0,0x80003
80000ddc:	ff010113          	addi	sp,sp,-16
80000de0:	eec50513          	addi	a0,a0,-276 # 80002eec <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002eed>
80000de4:	00112623          	sw	ra,12(sp)
80000de8:	180000ef          	jal	ra,80000f68 <printstr>
80000dec:	00c12083          	lw	ra,12(sp)
80000df0:	fff00513          	li	a0,-1
80000df4:	01010113          	addi	sp,sp,16
80000df8:	00008067          	ret

80000dfc <uart_fpgazynq_poll_in>:

static int uart_fpgazynq_poll_in(struct device *dev, unsigned char *c)
{	
	// no poll in support right now
	return 0;
}
80000dfc:	00000513          	li	a0,0
80000e00:	00008067          	ret

80000e04 <uart_fpgazynq_init>:

	// debug
	//__asm__ volatile("csrw mtvec, 0x0ff");

	return 0;
}
80000e04:	00000513          	li	a0,0
80000e08:	00008067          	ret

80000e0c <uart_fpgazynq_poll_out>:
	printfsvr("h\n");
80000e0c:	80003537          	lui	a0,0x80003
{
80000e10:	fe010113          	addi	sp,sp,-32
	printfsvr("h\n");
80000e14:	f1c50513          	addi	a0,a0,-228 # 80002f1c <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002f1d>
{
80000e18:	00112e23          	sw	ra,28(sp)
80000e1c:	00b12623          	sw	a1,12(sp)
	printfsvr("h\n");
80000e20:	5a4000ef          	jal	ra,800013c4 <printfsvr>
}
80000e24:	00c12583          	lw	a1,12(sp)
80000e28:	01c12083          	lw	ra,28(sp)
80000e2c:	02010113          	addi	sp,sp,32
80000e30:	00058513          	mv	a0,a1
80000e34:	00008067          	ret

80000e38 <syscall.constprop.2>:
80000e38:	ff010113          	addi	sp,sp,-16
80000e3c:	00812623          	sw	s0,12(sp)
80000e40:	01010413          	addi	s0,sp,16
80000e44:	f8010113          	addi	sp,sp,-128
80000e48:	03f10793          	addi	a5,sp,63
80000e4c:	fc07f793          	andi	a5,a5,-64
80000e50:	04000813          	li	a6,64
80000e54:	0107a023          	sw	a6,0(a5)
80000e58:	00000893          	li	a7,0
80000e5c:	0117a223          	sw	a7,4(a5)
80000e60:	00100813          	li	a6,1
80000e64:	0107a423          	sw	a6,8(a5)
80000e68:	00000893          	li	a7,0
80000e6c:	0117a623          	sw	a7,12(a5)
80000e70:	00a7a823          	sw	a0,16(a5)
80000e74:	00b7aa23          	sw	a1,20(a5)
80000e78:	00c7ac23          	sw	a2,24(a5)
80000e7c:	00d7ae23          	sw	a3,28(a5)
80000e80:	0330000f          	fence	rw,rw
80000e84:	80000737          	lui	a4,0x80000
80000e88:	2cf72023          	sw	a5,704(a4) # 800002c0 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800002c1>
80000e8c:	00000693          	li	a3,0
80000e90:	2cd72223          	sw	a3,708(a4)
80000e94:	0007a603          	lw	a2,0(a5)
80000e98:	0047a683          	lw	a3,4(a5)
80000e9c:	30571073          	csrw	mtvec,a4
80000ea0:	0087a603          	lw	a2,8(a5)
80000ea4:	00c7a683          	lw	a3,12(a5)
80000ea8:	30571073          	csrw	mtvec,a4
80000eac:	0107a603          	lw	a2,16(a5)
80000eb0:	0147a683          	lw	a3,20(a5)
80000eb4:	30571073          	csrw	mtvec,a4
80000eb8:	0187a603          	lw	a2,24(a5)
80000ebc:	01c7a683          	lw	a3,28(a5)
80000ec0:	30571073          	csrw	mtvec,a4
80000ec4:	800005b7          	lui	a1,0x80000
80000ec8:	3005a603          	lw	a2,768(a1) # 80000300 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80000301>
80000ecc:	3045a683          	lw	a3,772(a1)
80000ed0:	00d66733          	or	a4,a2,a3
80000ed4:	fe070ae3          	beqz	a4,80000ec8 <syscall.constprop.2+0x90>
80000ed8:	00000613          	li	a2,0
80000edc:	30c5a023          	sw	a2,768(a1)
80000ee0:	00000693          	li	a3,0
80000ee4:	30d5a223          	sw	a3,772(a1)
80000ee8:	0330000f          	fence	rw,rw
80000eec:	ff040113          	addi	sp,s0,-16
80000ef0:	0007a503          	lw	a0,0(a5)
80000ef4:	00c12403          	lw	s0,12(sp)
80000ef8:	0047a583          	lw	a1,4(a5)
80000efc:	01010113          	addi	sp,sp,16
80000f00:	00008067          	ret

80000f04 <putchar>:
80000f04:	00020713          	mv	a4,tp
80000f08:	00072583          	lw	a1,0(a4)
80000f0c:	ff010113          	addi	sp,sp,-16
80000f10:	00812423          	sw	s0,8(sp)
80000f14:	00112623          	sw	ra,12(sp)
80000f18:	00158613          	addi	a2,a1,1
80000f1c:	00c72023          	sw	a2,0(a4)
80000f20:	00020693          	mv	a3,tp
80000f24:	00b686b3          	add	a3,a3,a1
80000f28:	00a68023          	sb	a0,0(a3)
80000f2c:	00a00693          	li	a3,10
80000f30:	00078413          	mv	s0,a5
80000f34:	00d50663          	beq	a0,a3,80000f40 <putchar+0x3c>
80000f38:	04000793          	li	a5,64
80000f3c:	00f61c63          	bne	a2,a5,80000f54 <putchar+0x50>
80000f40:	41f65693          	srai	a3,a2,0x1f
80000f44:	00020513          	mv	a0,tp
80000f48:	00000593          	li	a1,0
80000f4c:	eedff0ef          	jal	ra,80000e38 <syscall.constprop.2>
80000f50:	00022023          	sw	zero,0(tp) # 0 <CONFIG_FE310_ISR_PLIC_OPT_LVL>
80000f54:	00c12083          	lw	ra,12(sp)
80000f58:	00000513          	li	a0,0
80000f5c:	00812403          	lw	s0,8(sp)
80000f60:	01010113          	addi	sp,sp,16
80000f64:	00008067          	ret

80000f68 <printstr>:
80000f68:	ff010113          	addi	sp,sp,-16
80000f6c:	00112623          	sw	ra,12(sp)
80000f70:	00812423          	sw	s0,8(sp)
80000f74:	00050413          	mv	s0,a0
80000f78:	48c000ef          	jal	ra,80001404 <strlen>
80000f7c:	00050613          	mv	a2,a0
80000f80:	00c12083          	lw	ra,12(sp)
80000f84:	00040513          	mv	a0,s0
80000f88:	00812403          	lw	s0,8(sp)
80000f8c:	00000693          	li	a3,0
80000f90:	00000593          	li	a1,0
80000f94:	01010113          	addi	sp,sp,16
80000f98:	ea1ff06f          	j	80000e38 <syscall.constprop.2>

80000f9c <strnlen>:
  return p - s;
}

size_t strnlen(const char *s, size_t n)
{
80000f9c:	00b505b3          	add	a1,a0,a1
  const char *p = s;
80000fa0:	00050793          	mv	a5,a0
  while (n-- && *p)
80000fa4:	00b78663          	beq	a5,a1,80000fb0 <strnlen+0x14>
80000fa8:	0007c703          	lbu	a4,0(a5)
80000fac:	00071663          	bnez	a4,80000fb8 <strnlen+0x1c>
    p++;
  return p - s;
80000fb0:	40a78533          	sub	a0,a5,a0
}
80000fb4:	00008067          	ret
    p++;
80000fb8:	00178793          	addi	a5,a5,1
80000fbc:	fe9ff06f          	j	80000fa4 <strnlen+0x8>

80000fc0 <vprintfmt.constprop.0>:

static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
80000fc0:	eb010113          	addi	sp,sp,-336
80000fc4:	13612823          	sw	s6,304(sp)
      break;

    // string
    case 's':
      if ((p = va_arg(ap, char *)) == NULL)
        p = "(null)";
80000fc8:	80003b37          	lui	s6,0x80003
80000fcc:	f20b0793          	addi	a5,s6,-224 # 80002f20 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002f21>
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
80000fd0:	14812423          	sw	s0,328(sp)
80000fd4:	13312e23          	sw	s3,316(sp)
80000fd8:	13512a23          	sw	s5,308(sp)
80000fdc:	13712623          	sw	s7,300(sp)
80000fe0:	14112623          	sw	ra,332(sp)
80000fe4:	14912223          	sw	s1,324(sp)
80000fe8:	15212023          	sw	s2,320(sp)
80000fec:	13412c23          	sw	s4,312(sp)
80000ff0:	13812423          	sw	s8,296(sp)
80000ff4:	13912223          	sw	s9,292(sp)
80000ff8:	13a12023          	sw	s10,288(sp)
80000ffc:	11b12e23          	sw	s11,284(sp)
80001000:	00050993          	mv	s3,a0
80001004:	00058413          	mv	s0,a1
    switch (ch = *(unsigned char *) fmt++) {
80001008:	06f00b93          	li	s7,111
8000100c:	03000a93          	li	s5,48
        p = "(null)";
80001010:	00f12623          	sw	a5,12(sp)
    while ((ch = *(unsigned char *) fmt) != '%') {
80001014:	02500493          	li	s1,37
80001018:	0009c503          	lbu	a0,0(s3)
8000101c:	08951063          	bne	a0,s1,8000109c <vprintfmt.constprop.0+0xdc>
    fmt++;
80001020:	00198493          	addi	s1,s3,1
    precision = -1;
80001024:	fff00d13          	li	s10,-1
    fmt++;
80001028:	00048713          	mv	a4,s1
    padc = ' ';
8000102c:	02000a13          	li	s4,32
    width = -1;
80001030:	000d0913          	mv	s2,s10
    lflag = 0;
80001034:	00000793          	li	a5,0
    switch (ch = *(unsigned char *) fmt++) {
80001038:	03900593          	li	a1,57
8000103c:	06400813          	li	a6,100
80001040:	06c00893          	li	a7,108
80001044:	03100313          	li	t1,49
        precision = precision * 10 + ch - '0';
80001048:	00a00e13          	li	t3,10
        if (ch < '0' || ch > '9')
8000104c:	00900e93          	li	t4,9
    switch (ch = *(unsigned char *) fmt++) {
80001050:	02a00693          	li	a3,42
80001054:	02e00f13          	li	t5,46
80001058:	02d00613          	li	a2,45
8000105c:	02300f93          	li	t6,35
80001060:	00074503          	lbu	a0,0(a4)
80001064:	00170993          	addi	s3,a4,1
80001068:	06a5e463          	bltu	a1,a0,800010d0 <vprintfmt.constprop.0+0x110>
8000106c:	10657463          	bleu	t1,a0,80001174 <vprintfmt.constprop.0+0x1b4>
80001070:	12d50463          	beq	a0,a3,80001198 <vprintfmt.constprop.0+0x1d8>
80001074:	04a6e463          	bltu	a3,a0,800010bc <vprintfmt.constprop.0+0xfc>
80001078:	03f50e63          	beq	a0,t6,800010b4 <vprintfmt.constprop.0+0xf4>
8000107c:	02500793          	li	a5,37
80001080:	2ef50c63          	beq	a0,a5,80001378 <vprintfmt.constprop.0+0x3b8>
      putch(ch, putdat);
      break;
      
    // unrecognized escape sequence - just print it literally
    default:
      putch('%', putdat);
80001084:	00000593          	li	a1,0
80001088:	02500513          	li	a0,37
8000108c:	e79ff0ef          	jal	ra,80000f04 <putchar>
80001090:	00040c93          	mv	s9,s0
      fmt = last_fmt;
80001094:	00048993          	mv	s3,s1
80001098:	0600006f          	j	800010f8 <vprintfmt.constprop.0+0x138>
      if (ch == '\0')
8000109c:	2e050663          	beqz	a0,80001388 <vprintfmt.constprop.0+0x3c8>
      putch(ch, putdat);
800010a0:	00000593          	li	a1,0
      fmt++;
800010a4:	00198993          	addi	s3,s3,1
      putch(ch, putdat);
800010a8:	e5dff0ef          	jal	ra,80000f04 <putchar>
800010ac:	f6dff06f          	j	80001018 <vprintfmt.constprop.0+0x58>
      padc = '0';
800010b0:	000a8a13          	mv	s4,s5
        width = precision, precision = -1;
800010b4:	00098713          	mv	a4,s3
800010b8:	fa9ff06f          	j	80001060 <vprintfmt.constprop.0+0xa0>
    switch (ch = *(unsigned char *) fmt++) {
800010bc:	0fe50a63          	beq	a0,t5,800011b0 <vprintfmt.constprop.0+0x1f0>
800010c0:	ff5508e3          	beq	a0,s5,800010b0 <vprintfmt.constprop.0+0xf0>
800010c4:	fcc510e3          	bne	a0,a2,80001084 <vprintfmt.constprop.0+0xc4>
      padc = '-';
800010c8:	00060a13          	mv	s4,a2
800010cc:	fe9ff06f          	j	800010b4 <vprintfmt.constprop.0+0xf4>
    switch (ch = *(unsigned char *) fmt++) {
800010d0:	25750863          	beq	a0,s7,80001320 <vprintfmt.constprop.0+0x360>
800010d4:	02abe663          	bltu	s7,a0,80001100 <vprintfmt.constprop.0+0x140>
800010d8:	19050a63          	beq	a0,a6,8000126c <vprintfmt.constprop.0+0x2ac>
800010dc:	0f150063          	beq	a0,a7,800011bc <vprintfmt.constprop.0+0x1fc>
800010e0:	06300793          	li	a5,99
800010e4:	faf510e3          	bne	a0,a5,80001084 <vprintfmt.constprop.0+0xc4>
      putch(va_arg(ap, int), putdat);
800010e8:	00042503          	lw	a0,0(s0)
800010ec:	00000593          	li	a1,0
800010f0:	00440c93          	addi	s9,s0,4
800010f4:	e11ff0ef          	jal	ra,80000f04 <putchar>
      fmt = last_fmt;
800010f8:	000c8413          	mv	s0,s9
800010fc:	f19ff06f          	j	80001014 <vprintfmt.constprop.0+0x54>
    switch (ch = *(unsigned char *) fmt++) {
80001100:	07300713          	li	a4,115
80001104:	0ce50063          	beq	a0,a4,800011c4 <vprintfmt.constprop.0+0x204>
80001108:	02a76c63          	bltu	a4,a0,80001140 <vprintfmt.constprop.0+0x180>
8000110c:	07000793          	li	a5,112
80001110:	f6f51ae3          	bne	a0,a5,80001084 <vprintfmt.constprop.0+0xc4>
      putch('0', putdat);
80001114:	00000593          	li	a1,0
80001118:	000a8513          	mv	a0,s5
8000111c:	de9ff0ef          	jal	ra,80000f04 <putchar>
      putch('x', putdat);
80001120:	00000593          	li	a1,0
80001124:	07800513          	li	a0,120
80001128:	dddff0ef          	jal	ra,80000f04 <putchar>
      base = 16;
8000112c:	01000b13          	li	s6,16
    return va_arg(*ap, unsigned int);
80001130:	00440c93          	addi	s9,s0,4
80001134:	00042483          	lw	s1,0(s0)
80001138:	00000413          	li	s0,0
8000113c:	1700006f          	j	800012ac <vprintfmt.constprop.0+0x2ec>
    switch (ch = *(unsigned char *) fmt++) {
80001140:	07500713          	li	a4,117
80001144:	1ce50a63          	beq	a0,a4,80001318 <vprintfmt.constprop.0+0x358>
80001148:	07800693          	li	a3,120
      base = 16;
8000114c:	01000b13          	li	s6,16
    switch (ch = *(unsigned char *) fmt++) {
80001150:	f2d51ae3          	bne	a0,a3,80001084 <vprintfmt.constprop.0+0xc4>
  if (lflag >= 2)
80001154:	00100693          	li	a3,1
80001158:	fcf6dce3          	ble	a5,a3,80001130 <vprintfmt.constprop.0+0x170>
    return va_arg(*ap, unsigned long long);
8000115c:	00740413          	addi	s0,s0,7
80001160:	ff847413          	andi	s0,s0,-8
80001164:	00840c93          	addi	s9,s0,8
80001168:	00042483          	lw	s1,0(s0)
8000116c:	00442403          	lw	s0,4(s0)
80001170:	13c0006f          	j	800012ac <vprintfmt.constprop.0+0x2ec>
    switch (ch = *(unsigned char *) fmt++) {
80001174:	00000d13          	li	s10,0
        precision = precision * 10 + ch - '0';
80001178:	03cd0d33          	mul	s10,s10,t3
8000117c:	00ad0533          	add	a0,s10,a0
80001180:	fd050d13          	addi	s10,a0,-48
        ch = *fmt;
80001184:	0009c503          	lbu	a0,0(s3)
        if (ch < '0' || ch > '9')
80001188:	fd050713          	addi	a4,a0,-48
8000118c:	00eeea63          	bltu	t4,a4,800011a0 <vprintfmt.constprop.0+0x1e0>
      for (precision = 0; ; ++fmt) {
80001190:	00198993          	addi	s3,s3,1
80001194:	fe5ff06f          	j	80001178 <vprintfmt.constprop.0+0x1b8>
      precision = va_arg(ap, int);
80001198:	00042d03          	lw	s10,0(s0)
8000119c:	00440413          	addi	s0,s0,4
      if (width < 0)
800011a0:	f0095ae3          	bgez	s2,800010b4 <vprintfmt.constprop.0+0xf4>
        width = precision, precision = -1;
800011a4:	000d0913          	mv	s2,s10
800011a8:	fff00d13          	li	s10,-1
800011ac:	f09ff06f          	j	800010b4 <vprintfmt.constprop.0+0xf4>
800011b0:	f00952e3          	bgez	s2,800010b4 <vprintfmt.constprop.0+0xf4>
800011b4:	00000913          	li	s2,0
800011b8:	efdff06f          	j	800010b4 <vprintfmt.constprop.0+0xf4>
      lflag++;
800011bc:	00178793          	addi	a5,a5,1
800011c0:	ef5ff06f          	j	800010b4 <vprintfmt.constprop.0+0xf4>
      if ((p = va_arg(ap, char *)) == NULL)
800011c4:	00042483          	lw	s1,0(s0)
800011c8:	00440c93          	addi	s9,s0,4
800011cc:	00049463          	bnez	s1,800011d4 <vprintfmt.constprop.0+0x214>
        p = "(null)";
800011d0:	00c12483          	lw	s1,12(sp)
      if (width > 0 && padc != '-')
800011d4:	03205a63          	blez	s2,80001208 <vprintfmt.constprop.0+0x248>
800011d8:	02d00793          	li	a5,45
800011dc:	02fa0663          	beq	s4,a5,80001208 <vprintfmt.constprop.0+0x248>
        for (width -= strnlen(p, precision); width > 0; width--)
800011e0:	000d0593          	mv	a1,s10
800011e4:	00048513          	mv	a0,s1
800011e8:	db5ff0ef          	jal	ra,80000f9c <strnlen>
800011ec:	40a90933          	sub	s2,s2,a0
800011f0:	00090413          	mv	s0,s2
800011f4:	04804463          	bgtz	s0,8000123c <vprintfmt.constprop.0+0x27c>
800011f8:	00090793          	mv	a5,s2
800011fc:	00095463          	bgez	s2,80001204 <vprintfmt.constprop.0+0x244>
80001200:	00000793          	li	a5,0
80001204:	40f90933          	sub	s2,s2,a5
80001208:	00048a13          	mv	s4,s1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
8000120c:	fff00d93          	li	s11,-1
80001210:	000a4503          	lbu	a0,0(s4)
80001214:	41490433          	sub	s0,s2,s4
80001218:	00848433          	add	s0,s1,s0
8000121c:	02051a63          	bnez	a0,80001250 <vprintfmt.constprop.0+0x290>
        putch(' ', putdat);
80001220:	02000493          	li	s1,32
      for (; width > 0; width--)
80001224:	ec805ae3          	blez	s0,800010f8 <vprintfmt.constprop.0+0x138>
        putch(' ', putdat);
80001228:	00000593          	li	a1,0
8000122c:	00048513          	mv	a0,s1
80001230:	cd5ff0ef          	jal	ra,80000f04 <putchar>
      for (; width > 0; width--)
80001234:	fff40413          	addi	s0,s0,-1
80001238:	fedff06f          	j	80001224 <vprintfmt.constprop.0+0x264>
          putch(padc, putdat);
8000123c:	00000593          	li	a1,0
80001240:	000a0513          	mv	a0,s4
80001244:	cc1ff0ef          	jal	ra,80000f04 <putchar>
        for (width -= strnlen(p, precision); width > 0; width--)
80001248:	fff40413          	addi	s0,s0,-1
8000124c:	fa9ff06f          	j	800011f4 <vprintfmt.constprop.0+0x234>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
80001250:	000d4663          	bltz	s10,8000125c <vprintfmt.constprop.0+0x29c>
80001254:	fffd0d13          	addi	s10,s10,-1
80001258:	fdbd04e3          	beq	s10,s11,80001220 <vprintfmt.constprop.0+0x260>
        putch(ch, putdat);
8000125c:	00000593          	li	a1,0
80001260:	ca5ff0ef          	jal	ra,80000f04 <putchar>
        p++;
80001264:	001a0a13          	addi	s4,s4,1
80001268:	fa9ff06f          	j	80001210 <vprintfmt.constprop.0+0x250>
  if (lflag >= 2)
8000126c:	00100713          	li	a4,1
80001270:	08f75c63          	ble	a5,a4,80001308 <vprintfmt.constprop.0+0x348>
    return va_arg(*ap, long long);
80001274:	00740413          	addi	s0,s0,7
80001278:	ff847413          	andi	s0,s0,-8
8000127c:	00840c93          	addi	s9,s0,8
80001280:	00042483          	lw	s1,0(s0)
80001284:	00442403          	lw	s0,4(s0)
      base = 10;
80001288:	00a00b13          	li	s6,10
      if ((long long) num < 0) {
8000128c:	02045063          	bgez	s0,800012ac <vprintfmt.constprop.0+0x2ec>
        putch('-', putdat);
80001290:	00000593          	li	a1,0
80001294:	02d00513          	li	a0,45
80001298:	c6dff0ef          	jal	ra,80000f04 <putchar>
        num = -(long long) num;
8000129c:	409004b3          	neg	s1,s1
800012a0:	009037b3          	snez	a5,s1
800012a4:	40800433          	neg	s0,s0
800012a8:	40f40433          	sub	s0,s0,a5
  int pos = 0;
800012ac:	00000d13          	li	s10,0
    digs[pos++] = num % base;
800012b0:	41fb5c13          	srai	s8,s6,0x1f
800012b4:	001d0d13          	addi	s10,s10,1
800012b8:	01010793          	addi	a5,sp,16
800012bc:	002d1d93          	slli	s11,s10,0x2
800012c0:	000b0613          	mv	a2,s6
800012c4:	000c0693          	mv	a3,s8
800012c8:	00048513          	mv	a0,s1
800012cc:	00040593          	mv	a1,s0
800012d0:	01b78db3          	add	s11,a5,s11
800012d4:	eb8ff0ef          	jal	ra,8000098c <__umoddi3>
800012d8:	feadae23          	sw	a0,-4(s11)
    if (num < base)
800012dc:	05846e63          	bltu	s0,s8,80001338 <vprintfmt.constprop.0+0x378>
800012e0:	008c1463          	bne	s8,s0,800012e8 <vprintfmt.constprop.0+0x328>
800012e4:	0564ea63          	bltu	s1,s6,80001338 <vprintfmt.constprop.0+0x378>
    num /= base;
800012e8:	00048513          	mv	a0,s1
800012ec:	00040593          	mv	a1,s0
800012f0:	000b0613          	mv	a2,s6
800012f4:	000c0693          	mv	a3,s8
800012f8:	a20ff0ef          	jal	ra,80000518 <__udivdi3>
800012fc:	00050493          	mv	s1,a0
80001300:	00058413          	mv	s0,a1
80001304:	fb1ff06f          	j	800012b4 <vprintfmt.constprop.0+0x2f4>
    return va_arg(*ap, long);
80001308:	00042483          	lw	s1,0(s0)
8000130c:	00440c93          	addi	s9,s0,4
80001310:	41f4d413          	srai	s0,s1,0x1f
80001314:	f75ff06f          	j	80001288 <vprintfmt.constprop.0+0x2c8>
      base = 10;
80001318:	00a00b13          	li	s6,10
8000131c:	e39ff06f          	j	80001154 <vprintfmt.constprop.0+0x194>
      base = 8;
80001320:	00800b13          	li	s6,8
80001324:	e31ff06f          	j	80001154 <vprintfmt.constprop.0+0x194>
    putch(padc, putdat);
80001328:	00000593          	li	a1,0
8000132c:	000a0513          	mv	a0,s4
80001330:	bd5ff0ef          	jal	ra,80000f04 <putchar>
80001334:	fff90913          	addi	s2,s2,-1
  while (width-- > pos)
80001338:	ff2d48e3          	blt	s10,s2,80001328 <vprintfmt.constprop.0+0x368>
8000133c:	00000413          	li	s0,0
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
80001340:	ffc00493          	li	s1,-4
80001344:	00900913          	li	s2,9
80001348:	029407b3          	mul	a5,s0,s1
8000134c:	00fd87b3          	add	a5,s11,a5
80001350:	ffc7a503          	lw	a0,-4(a5)
80001354:	000a8793          	mv	a5,s5
80001358:	00a97463          	bleu	a0,s2,80001360 <vprintfmt.constprop.0+0x3a0>
8000135c:	05700793          	li	a5,87
80001360:	00000593          	li	a1,0
80001364:	00f50533          	add	a0,a0,a5
80001368:	00140413          	addi	s0,s0,1
8000136c:	b99ff0ef          	jal	ra,80000f04 <putchar>
  while (pos-- > 0)
80001370:	fc8d1ce3          	bne	s10,s0,80001348 <vprintfmt.constprop.0+0x388>
80001374:	d85ff06f          	j	800010f8 <vprintfmt.constprop.0+0x138>
      putch(ch, putdat);
80001378:	00000593          	li	a1,0
8000137c:	b89ff0ef          	jal	ra,80000f04 <putchar>
80001380:	00040c93          	mv	s9,s0
80001384:	d75ff06f          	j	800010f8 <vprintfmt.constprop.0+0x138>
      break;
    }
  }
}
80001388:	14c12083          	lw	ra,332(sp)
8000138c:	14812403          	lw	s0,328(sp)
80001390:	14412483          	lw	s1,324(sp)
80001394:	14012903          	lw	s2,320(sp)
80001398:	13c12983          	lw	s3,316(sp)
8000139c:	13812a03          	lw	s4,312(sp)
800013a0:	13412a83          	lw	s5,308(sp)
800013a4:	13012b03          	lw	s6,304(sp)
800013a8:	12c12b83          	lw	s7,300(sp)
800013ac:	12812c03          	lw	s8,296(sp)
800013b0:	12412c83          	lw	s9,292(sp)
800013b4:	12012d03          	lw	s10,288(sp)
800013b8:	11c12d83          	lw	s11,284(sp)
800013bc:	15010113          	addi	sp,sp,336
800013c0:	00008067          	ret

800013c4 <printfsvr>:

int printfsvr(const char* fmt, ...)
{
800013c4:	fc010113          	addi	sp,sp,-64
800013c8:	02b12223          	sw	a1,36(sp)
  va_list ap;
  va_start(ap, fmt);
800013cc:	02410593          	addi	a1,sp,36
{
800013d0:	00112e23          	sw	ra,28(sp)
800013d4:	02c12423          	sw	a2,40(sp)
800013d8:	02d12623          	sw	a3,44(sp)
800013dc:	02e12823          	sw	a4,48(sp)
800013e0:	02f12a23          	sw	a5,52(sp)
800013e4:	03012c23          	sw	a6,56(sp)
800013e8:	03112e23          	sw	a7,60(sp)
  va_start(ap, fmt);
800013ec:	00b12623          	sw	a1,12(sp)

  vprintfmt((void*)putchar, 0, fmt, ap);
800013f0:	bd1ff0ef          	jal	ra,80000fc0 <vprintfmt.constprop.0>

  va_end(ap);
  return 0; // incorrect return value, but who cares, anyway?
}
800013f4:	01c12083          	lw	ra,28(sp)
800013f8:	00000513          	li	a0,0
800013fc:	04010113          	addi	sp,sp,64
80001400:	00008067          	ret

80001404 <strlen>:
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
80001404:	00050713          	mv	a4,a0
80001408:	00050793          	mv	a5,a0
8000140c:	0007c683          	lbu	a3,0(a5)
80001410:	40e78533          	sub	a0,a5,a4
80001414:	00069463          	bnez	a3,8000141c <strlen+0x18>
80001418:	00008067          	ret
8000141c:	00178793          	addi	a5,a5,1
80001420:	fedff06f          	j	8000140c <strlen+0x8>

80001424 <strcmp>:
80001424:	00054783          	lbu	a5,0(a0)
80001428:	0005c703          	lbu	a4,0(a1)
8000142c:	00e79663          	bne	a5,a4,80001438 <strcmp+0x14>
80001430:	00079863          	bnez	a5,80001440 <strcmp+0x1c>
80001434:	00078713          	mv	a4,a5
80001438:	40e78533          	sub	a0,a5,a4
8000143c:	00008067          	ret
80001440:	00150513          	addi	a0,a0,1
80001444:	00158593          	addi	a1,a1,1
80001448:	fddff06f          	j	80001424 <strcmp>

8000144c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
8000144c:	0ff5f813          	andi	a6,a1,255
	unsigned char *d_byte = (unsigned char *)buf;
80001450:	00050793          	mv	a5,a0

	while (((unsigned int)d_byte) & 0x3) {
80001454:	0037f713          	andi	a4,a5,3
80001458:	04071263          	bnez	a4,8000149c <memset+0x50>
	};

	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;
8000145c:	0ff5f593          	andi	a1,a1,255

	c_word |= c_word << 8;
80001460:	00859713          	slli	a4,a1,0x8
80001464:	00e5e5b3          	or	a1,a1,a4
	c_word |= c_word << 16;
80001468:	01059713          	slli	a4,a1,0x10
8000146c:	00e5e5b3          	or	a1,a1,a4

	while (n >= sizeof(unsigned int)) {
80001470:	00300893          	li	a7,3
80001474:	00078713          	mv	a4,a5
80001478:	40e606b3          	sub	a3,a2,a4
8000147c:	00d786b3          	add	a3,a5,a3
80001480:	02d8e863          	bltu	a7,a3,800014b0 <memset+0x64>
80001484:	ffc67713          	andi	a4,a2,-4
80001488:	00e787b3          	add	a5,a5,a4
8000148c:	00367613          	andi	a2,a2,3
80001490:	00c78633          	add	a2,a5,a2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
80001494:	02c79463          	bne	a5,a2,800014bc <memset+0x70>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
80001498:	00008067          	ret
		if (n == 0) {
8000149c:	fe060ee3          	beqz	a2,80001498 <memset+0x4c>
		*(d_byte++) = c_byte;
800014a0:	00178793          	addi	a5,a5,1
800014a4:	ff078fa3          	sb	a6,-1(a5)
		n--;
800014a8:	fff60613          	addi	a2,a2,-1
800014ac:	fa9ff06f          	j	80001454 <memset+0x8>
		*(d_word++) = c_word;
800014b0:	00470713          	addi	a4,a4,4
800014b4:	feb72e23          	sw	a1,-4(a4)
800014b8:	fc1ff06f          	j	80001478 <memset+0x2c>
		*(d_byte++) = c_byte;
800014bc:	00178793          	addi	a5,a5,1
800014c0:	ff078fa3          	sb	a6,-1(a5)
800014c4:	fd1ff06f          	j	80001494 <memset+0x48>

800014c8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
800014c8:	ff010113          	addi	sp,sp,-16
800014cc:	00812423          	sw	s0,8(sp)
800014d0:	00912223          	sw	s1,4(sp)
800014d4:	80003437          	lui	s0,0x80003
800014d8:	00112623          	sw	ra,12(sp)
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
800014dc:	00a00793          	li	a5,10
{
800014e0:	00050493          	mv	s1,a0
800014e4:	44440413          	addi	s0,s0,1092 # 80003444 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003445>
	if ('\n' == c) {
800014e8:	00f51c63          	bne	a0,a5,80001500 <console_out+0x38>
		uart_poll_out(uart_console_dev, '\r');
800014ec:	00042503          	lw	a0,0(s0)
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
800014f0:	00d00593          	li	a1,13
800014f4:	00452783          	lw	a5,4(a0)
800014f8:	0047a783          	lw	a5,4(a5)
800014fc:	000780e7          	jalr	a5
	}
	uart_poll_out(uart_console_dev, c);
80001500:	00042503          	lw	a0,0(s0)
80001504:	0ff4f593          	andi	a1,s1,255
80001508:	00452783          	lw	a5,4(a0)
8000150c:	0047a783          	lw	a5,4(a5)
80001510:	000780e7          	jalr	a5

	return c;
}
80001514:	00c12083          	lw	ra,12(sp)
80001518:	00048513          	mv	a0,s1
8000151c:	00812403          	lw	s0,8(sp)
80001520:	00412483          	lw	s1,4(sp)
80001524:	01010113          	addi	sp,sp,16
80001528:	00008067          	ret

8000152c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
8000152c:	80001537          	lui	a0,0x80001
80001530:	4c850513          	addi	a0,a0,1224 # 800014c8 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800014c9>
80001534:	4240006f          	j	80001958 <__printk_hook_install>

80001538 <uart_console_init>:
static int uart_console_init(struct device *arg)
{

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
80001538:	80003537          	lui	a0,0x80003
{
8000153c:	ff010113          	addi	sp,sp,-16
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
80001540:	f0450513          	addi	a0,a0,-252 # 80002f04 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002f05>
{
80001544:	00112623          	sw	ra,12(sp)
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
80001548:	499000ef          	jal	ra,800021e0 <device_get_binding>
8000154c:	800037b7          	lui	a5,0x80003
80001550:	44a7a223          	sw	a0,1092(a5) # 80003444 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003445>
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
80001554:	fd9ff0ef          	jal	ra,8000152c <uart_console_hook_install>

	return 0;
}
80001558:	00c12083          	lw	ra,12(sp)
8000155c:	00000513          	li	a0,0
80001560:	01010113          	addi	sp,sp,16
80001564:	00008067          	ret

80001568 <riscv_machine_timer_irq_handler>:

static void riscv_machine_timer_irq_handler(void *unused)
{
	ARG_UNUSED(unused);

	_sys_clock_tick_announce();
80001568:	800037b7          	lui	a5,0x80003
8000156c:	3e87a503          	lw	a0,1000(a5) # 800033e8 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800033e9>
{
80001570:	ff010113          	addi	sp,sp,-16
80001574:	00112623          	sw	ra,12(sp)
	_sys_clock_tick_announce();
80001578:	194010ef          	jal	ra,8000270c <_nano_sys_clock_tick_announce>
	irq_disable(RISCV_MACHINE_TIMER_IRQ);
8000157c:	00700513          	li	a0,7
80001580:	039000ef          	jal	ra,80001db8 <_arch_irq_disable>
	rtc = mtime->val_low;
80001584:	0200c7b7          	lui	a5,0x200c
80001588:	ff87a703          	lw	a4,-8(a5) # 200bff8 <CONFIG_RISCV_ROM_SIZE+0x140bff8>
	rtc |= ((u64_t)mtime->val_high << 32);
8000158c:	ffc7a603          	lw	a2,-4(a5)
	rtc += sys_clock_hw_cycles_per_tick;
80001590:	800037b7          	lui	a5,0x80003
80001594:	3ec7a783          	lw	a5,1004(a5) # 800033ec <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800033ed>

	/* Rearm timer */
	riscv_machine_rearm_timer();
}
80001598:	00c12083          	lw	ra,12(sp)
	irq_enable(RISCV_MACHINE_TIMER_IRQ);
8000159c:	00700513          	li	a0,7
	rtc += sys_clock_hw_cycles_per_tick;
800015a0:	41f7d693          	srai	a3,a5,0x1f
800015a4:	00e78733          	add	a4,a5,a4
800015a8:	00c686b3          	add	a3,a3,a2
800015ac:	00f737b3          	sltu	a5,a4,a5
800015b0:	00d787b3          	add	a5,a5,a3
	mtimecmp->val_low = (u32_t)(rtc & 0xffffffff);
800015b4:	020046b7          	lui	a3,0x2004
800015b8:	00e6a023          	sw	a4,0(a3) # 2004000 <CONFIG_RISCV_ROM_SIZE+0x1404000>
	mtimecmp->val_high = (u32_t)((rtc >> 32) & 0xffffffff);
800015bc:	00f6a223          	sw	a5,4(a3)
}
800015c0:	01010113          	addi	sp,sp,16
	irq_enable(RISCV_MACHINE_TIMER_IRQ);
800015c4:	7d40006f          	j	80001d98 <_arch_irq_enable>

800015c8 <_sys_clock_driver_init>:
#ifdef CONFIG_TICKLESS_IDLE
#error "Tickless idle not yet implemented for riscv-machine timer"
#endif

int _sys_clock_driver_init(struct device *device)
{
800015c8:	ff010113          	addi	sp,sp,-16
	ARG_UNUSED(device);

	IRQ_CONNECT(RISCV_MACHINE_TIMER_IRQ, 0,
800015cc:	00000593          	li	a1,0
800015d0:	00700513          	li	a0,7
{
800015d4:	00112623          	sw	ra,12(sp)
	IRQ_CONNECT(RISCV_MACHINE_TIMER_IRQ, 0,
800015d8:	194000ef          	jal	ra,8000176c <riscv_plic_set_priority>
	irq_disable(RISCV_MACHINE_TIMER_IRQ);
800015dc:	00700513          	li	a0,7
800015e0:	7d8000ef          	jal	ra,80001db8 <_arch_irq_disable>
	rtc = mtime->val_low;
800015e4:	0200c7b7          	lui	a5,0x200c
800015e8:	ff87a703          	lw	a4,-8(a5) # 200bff8 <CONFIG_RISCV_ROM_SIZE+0x140bff8>
	rtc |= ((u64_t)mtime->val_high << 32);
800015ec:	ffc7a603          	lw	a2,-4(a5)
	rtc += sys_clock_hw_cycles_per_tick;
800015f0:	800037b7          	lui	a5,0x80003
800015f4:	3ec7a783          	lw	a5,1004(a5) # 800033ec <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800033ed>
	irq_enable(RISCV_MACHINE_TIMER_IRQ);
800015f8:	00700513          	li	a0,7
	rtc += sys_clock_hw_cycles_per_tick;
800015fc:	00e78733          	add	a4,a5,a4
80001600:	41f7d693          	srai	a3,a5,0x1f
80001604:	00c686b3          	add	a3,a3,a2
80001608:	00f737b3          	sltu	a5,a4,a5
8000160c:	00d787b3          	add	a5,a5,a3
	mtimecmp->val_low = (u32_t)(rtc & 0xffffffff);
80001610:	020046b7          	lui	a3,0x2004
80001614:	00e6a023          	sw	a4,0(a3) # 2004000 <CONFIG_RISCV_ROM_SIZE+0x1404000>
	mtimecmp->val_high = (u32_t)((rtc >> 32) & 0xffffffff);
80001618:	00f6a223          	sw	a5,4(a3)
	irq_enable(RISCV_MACHINE_TIMER_IRQ);
8000161c:	77c000ef          	jal	ra,80001d98 <_arch_irq_enable>

	/* Initialize timer, just call riscv_machine_rearm_timer */
	riscv_machine_rearm_timer();

	return 0;
}
80001620:	00c12083          	lw	ra,12(sp)
80001624:	00000513          	li	a0,0
80001628:	01010113          	addi	sp,sp,16
8000162c:	00008067          	ret

80001630 <plic_fe310_irq_handler>:
		(volatile u32_t *)FE310_PLIC_IRQ_EN_BASE_ADDR;
	u32_t fe310_irq = irq - RISCV_MAX_GENERIC_IRQ;

	en += (fe310_irq >> 5);
	return !!(*en & (1 << (fe310_irq & 31)));
}
80001630:	ff010113          	addi	sp,sp,-16
80001634:	0c2007b7          	lui	a5,0xc200
80001638:	00812423          	sw	s0,8(sp)
8000163c:	0047a403          	lw	s0,4(a5) # c200004 <CONFIG_RISCV_ROM_SIZE+0xb600004>
80001640:	800037b7          	lui	a5,0x80003
80001644:	00912223          	sw	s1,4(sp)
80001648:	00112623          	sw	ra,12(sp)
8000164c:	4487a423          	sw	s0,1096(a5) # 80003448 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003449>
80001650:	fff40693          	addi	a3,s0,-1
80001654:	03600713          	li	a4,54
80001658:	44878493          	addi	s1,a5,1096
8000165c:	00d77663          	bleu	a3,a4,80001668 <plic_fe310_irq_handler+0x38>
80001660:	00000513          	li	a0,0
80001664:	1dd000ef          	jal	ra,80002040 <_irq_spurious>
80001668:	00b40413          	addi	s0,s0,11
8000166c:	800007b7          	lui	a5,0x80000
80001670:	29078793          	addi	a5,a5,656 # 80000290 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80000291>
80001674:	00341413          	slli	s0,s0,0x3
80001678:	00f40433          	add	s0,s0,a5
8000167c:	00442783          	lw	a5,4(s0)
80001680:	00042503          	lw	a0,0(s0)
80001684:	000780e7          	jalr	a5
80001688:	0004a703          	lw	a4,0(s1)
8000168c:	00c12083          	lw	ra,12(sp)
80001690:	0c2007b7          	lui	a5,0xc200
80001694:	00812403          	lw	s0,8(sp)
80001698:	00412483          	lw	s1,4(sp)
8000169c:	00e7a223          	sw	a4,4(a5) # c200004 <CONFIG_RISCV_ROM_SIZE+0xb600004>
800016a0:	01010113          	addi	sp,sp,16
800016a4:	00008067          	ret

800016a8 <plic_fe310_init>:
800016a8:	ff010113          	addi	sp,sp,-16
800016ac:	0c0027b7          	lui	a5,0xc002
800016b0:	00112623          	sw	ra,12(sp)
800016b4:	0007a023          	sw	zero,0(a5) # c002000 <CONFIG_RISCV_ROM_SIZE+0xb402000>
800016b8:	0007a223          	sw	zero,4(a5)
800016bc:	0c0007b7          	lui	a5,0xc000
800016c0:	0e078713          	addi	a4,a5,224 # c0000e0 <CONFIG_RISCV_ROM_SIZE+0xb4000e0>
800016c4:	0007a023          	sw	zero,0(a5)
800016c8:	00478793          	addi	a5,a5,4
800016cc:	fee79ce3          	bne	a5,a4,800016c4 <plic_fe310_init+0x1c>
800016d0:	0c2007b7          	lui	a5,0xc200
800016d4:	00b00513          	li	a0,11
800016d8:	0007a023          	sw	zero,0(a5) # c200000 <CONFIG_RISCV_ROM_SIZE+0xb600000>
800016dc:	6bc000ef          	jal	ra,80001d98 <_arch_irq_enable>
800016e0:	00c12083          	lw	ra,12(sp)
800016e4:	00000513          	li	a0,0
800016e8:	01010113          	addi	sp,sp,16
800016ec:	00008067          	ret

800016f0 <riscv_plic_irq_enable>:
800016f0:	ff550693          	addi	a3,a0,-11
800016f4:	00800793          	li	a5,8
800016f8:	3007b7f3          	csrrc	a5,mstatus,a5
800016fc:	0056d713          	srli	a4,a3,0x5
80001700:	0c002637          	lui	a2,0xc002
80001704:	00271713          	slli	a4,a4,0x2
80001708:	00c70733          	add	a4,a4,a2
8000170c:	00072603          	lw	a2,0(a4)
80001710:	00100513          	li	a0,1
80001714:	00d51533          	sll	a0,a0,a3
80001718:	00c56533          	or	a0,a0,a2
8000171c:	00a72023          	sw	a0,0(a4)
80001720:	0087f793          	andi	a5,a5,8
80001724:	3007a7f3          	csrrs	a5,mstatus,a5
80001728:	00008067          	ret

8000172c <riscv_plic_irq_disable>:
8000172c:	ff550693          	addi	a3,a0,-11
80001730:	00800793          	li	a5,8
80001734:	3007b7f3          	csrrc	a5,mstatus,a5
80001738:	0056d713          	srli	a4,a3,0x5
8000173c:	0c002637          	lui	a2,0xc002
80001740:	00271713          	slli	a4,a4,0x2
80001744:	00c70733          	add	a4,a4,a2
80001748:	00072603          	lw	a2,0(a4)
8000174c:	00100513          	li	a0,1
80001750:	00d51533          	sll	a0,a0,a3
80001754:	fff54513          	not	a0,a0
80001758:	00c57533          	and	a0,a0,a2
8000175c:	00a72023          	sw	a0,0(a4)
80001760:	0087f793          	andi	a5,a5,8
80001764:	3007a7f3          	csrrs	a5,mstatus,a5
80001768:	00008067          	ret

8000176c <riscv_plic_set_priority>:
{
	volatile u32_t *prio =
		(volatile u32_t *)FE310_PLIC_PRIO_BASE_ADDR;

	/* Can set priority only for PLIC-specific interrupt line */
	if (irq <= RISCV_MAX_GENERIC_IRQ)
8000176c:	00b00793          	li	a5,11
80001770:	02a7f263          	bleu	a0,a5,80001794 <riscv_plic_set_priority+0x28>
80001774:	00700793          	li	a5,7
80001778:	00b7f463          	bleu	a1,a5,80001780 <riscv_plic_set_priority+0x14>
8000177c:	00078593          	mv	a1,a5
		return;

	if (priority > FE310_PLIC_MAX_PRIORITY)
		priority = FE310_PLIC_MAX_PRIORITY;

	prio += (irq - RISCV_MAX_GENERIC_IRQ);
80001780:	00251513          	slli	a0,a0,0x2
80001784:	fd450513          	addi	a0,a0,-44
80001788:	0c0007b7          	lui	a5,0xc000
8000178c:	00f50533          	add	a0,a0,a5
	*prio = priority;
80001790:	00b52023          	sw	a1,0(a0)
80001794:	00008067          	ret

80001798 <riscv_plic_get_irq>:
 * @return N/A
 */
int riscv_plic_get_irq(void)
{
	return save_irq;
}
80001798:	800037b7          	lui	a5,0x80003
8000179c:	4487a503          	lw	a0,1096(a5) # 80003448 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003449>
800017a0:	00008067          	ret

800017a4 <plic_fe310_irq_handler_fast>:
 * 	@brief: Handler directly called from isr.S on plic irq 
 * 			while bypassing sw_isr_table.
 *  		Use in combination with connect_handler_fast()
 */
static void(*_isr_fast)(int num_irq) = (void(*)(int))_irq_spurious;
void plic_fe310_irq_handler_fast(void *arg){
800017a4:	ff010113          	addi	sp,sp,-16
800017a8:	00912223          	sw	s1,4(sp)

	volatile struct plic_fe310_regs_t *regs =
		(volatile struct plic_fe310_regs_t *)FE310_PLIC_REG_BASE_ADDR;

	u32_t irq_num = regs->claim_complete; // cleared upon read
800017ac:	0c2004b7          	lui	s1,0xc200
void plic_fe310_irq_handler_fast(void *arg){
800017b0:	00812423          	sw	s0,8(sp)
	u32_t irq_num = regs->claim_complete; // cleared upon read
800017b4:	0044a403          	lw	s0,4(s1) # c200004 <CONFIG_RISCV_ROM_SIZE+0xb600004>
	// to support subsequent callbacks to use eg. riscv_plic_get_irq()
	save_irq = irq_num; 
800017b8:	800037b7          	lui	a5,0x80003
void plic_fe310_irq_handler_fast(void *arg){
800017bc:	00112623          	sw	ra,12(sp)
	save_irq = irq_num; 
800017c0:	4487a423          	sw	s0,1096(a5) # 80003448 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003449>

	// invoke registered callback
	_isr_fast(irq_num);
800017c4:	800037b7          	lui	a5,0x80003
800017c8:	3d87a783          	lw	a5,984(a5) # 800033d8 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800033d9>
800017cc:	00040513          	mv	a0,s0
800017d0:	000780e7          	jalr	a5
	//u32_t t;
	//u32_t t2;
	//__asm__ volatile("addi %0, t1, 0" : "=r" (t));
	//__asm__ volatile("addi %0, t2, 0" : "=r" (t2));
	//printk("t1 %u t2 %u \n", t1, t2);
}
800017d4:	00c12083          	lw	ra,12(sp)
	regs->claim_complete = irq_num;
800017d8:	0084a223          	sw	s0,4(s1)
}
800017dc:	00812403          	lw	s0,8(sp)
800017e0:	00412483          	lw	s1,4(sp)
800017e4:	01010113          	addi	sp,sp,16
800017e8:	00008067          	ret

800017ec <_nop_char_out>:
 * @return a function pointer or NULL if no hook is set
 */
void *__printk_get_hook(void)
{
	return _char_out;
}
800017ec:	00000513          	li	a0,0
800017f0:	00008067          	ret

800017f4 <char_out>:
800017f4:	0005a783          	lw	a5,0(a1)
800017f8:	00178793          	addi	a5,a5,1
800017fc:	00f5a023          	sw	a5,0(a1)
80001800:	800037b7          	lui	a5,0x80003
80001804:	3dc7a303          	lw	t1,988(a5) # 800033dc <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800033dd>
80001808:	00030067          	jr	t1

8000180c <_printk_dec_ulong>:
8000180c:	fb010113          	addi	sp,sp,-80
80001810:	04812423          	sw	s0,72(sp)
80001814:	03412c23          	sw	s4,56(sp)
80001818:	03512a23          	sw	s5,52(sp)
8000181c:	03612823          	sw	s6,48(sp)
80001820:	00100793          	li	a5,1
80001824:	04112623          	sw	ra,76(sp)
80001828:	04912223          	sw	s1,68(sp)
8000182c:	05212023          	sw	s2,64(sp)
80001830:	03312e23          	sw	s3,60(sp)
80001834:	03712623          	sw	s7,44(sp)
80001838:	03812423          	sw	s8,40(sp)
8000183c:	03912223          	sw	s9,36(sp)
80001840:	03a12023          	sw	s10,32(sp)
80001844:	01b12e23          	sw	s11,28(sp)
80001848:	00050a13          	mv	s4,a0
8000184c:	00058a93          	mv	s5,a1
80001850:	00068b13          	mv	s6,a3
80001854:	00078413          	mv	s0,a5
80001858:	00e05463          	blez	a4,80001860 <_printk_dec_ulong+0x54>
8000185c:	00070413          	mv	s0,a4
80001860:	02000c93          	li	s9,32
80001864:	00fb1463          	bne	s6,a5,8000186c <_printk_dec_ulong+0x60>
80001868:	03000c93          	li	s9,48
8000186c:	00100913          	li	s2,1
80001870:	3b9ad9b7          	lui	s3,0x3b9ad
80001874:	00060493          	mv	s1,a2
80001878:	00a00d13          	li	s10,10
8000187c:	00000713          	li	a4,0
80001880:	9ff98993          	addi	s3,s3,-1537 # 3b9ac9ff <CONFIG_RISCV_RAM_BASE_ADDR+0x1b9ac9ff>
80001884:	00090b93          	mv	s7,s2
80001888:	00200d93          	li	s11,2
8000188c:	00198c13          	addi	s8,s3,1
80001890:	00071463          	bnez	a4,80001898 <_printk_dec_ulong+0x8c>
80001894:	0899f663          	bleu	s1,s3,80001920 <_printk_dec_ulong+0x114>
80001898:	0384d533          	divu	a0,s1,s8
8000189c:	000a8593          	mv	a1,s5
800018a0:	00190913          	addi	s2,s2,1
800018a4:	03050513          	addi	a0,a0,48
800018a8:	000a00e7          	jalr	s4
800018ac:	000b8713          	mv	a4,s7
800018b0:	00a00793          	li	a5,10
800018b4:	fffd0d13          	addi	s10,s10,-1
800018b8:	0384f4b3          	remu	s1,s1,s8
800018bc:	02f9d9b3          	divu	s3,s3,a5
800018c0:	fd7d16e3          	bne	s10,s7,8000188c <_printk_dec_ulong+0x80>
800018c4:	000a8593          	mv	a1,s5
800018c8:	03048513          	addi	a0,s1,48
800018cc:	000a00e7          	jalr	s4
800018d0:	00300793          	li	a5,3
800018d4:	00fb1863          	bne	s6,a5,800018e4 <_printk_dec_ulong+0xd8>
800018d8:	41240433          	sub	s0,s0,s2
800018dc:	02000493          	li	s1,32
800018e0:	06804263          	bgtz	s0,80001944 <_printk_dec_ulong+0x138>
800018e4:	04c12083          	lw	ra,76(sp)
800018e8:	04812403          	lw	s0,72(sp)
800018ec:	04412483          	lw	s1,68(sp)
800018f0:	04012903          	lw	s2,64(sp)
800018f4:	03c12983          	lw	s3,60(sp)
800018f8:	03812a03          	lw	s4,56(sp)
800018fc:	03412a83          	lw	s5,52(sp)
80001900:	03012b03          	lw	s6,48(sp)
80001904:	02c12b83          	lw	s7,44(sp)
80001908:	02812c03          	lw	s8,40(sp)
8000190c:	02412c83          	lw	s9,36(sp)
80001910:	02012d03          	lw	s10,32(sp)
80001914:	01c12d83          	lw	s11,28(sp)
80001918:	05010113          	addi	sp,sp,80
8000191c:	00008067          	ret
80001920:	f9a448e3          	blt	s0,s10,800018b0 <_printk_dec_ulong+0xa4>
80001924:	f96de6e3          	bltu	s11,s6,800018b0 <_printk_dec_ulong+0xa4>
80001928:	000a8593          	mv	a1,s5
8000192c:	000c8513          	mv	a0,s9
80001930:	00e12623          	sw	a4,12(sp)
80001934:	000a00e7          	jalr	s4
80001938:	00190913          	addi	s2,s2,1
8000193c:	00c12703          	lw	a4,12(sp)
80001940:	f71ff06f          	j	800018b0 <_printk_dec_ulong+0xa4>
80001944:	000a8593          	mv	a1,s5
80001948:	00048513          	mv	a0,s1
8000194c:	000a00e7          	jalr	s4
80001950:	fff40413          	addi	s0,s0,-1
80001954:	f8dff06f          	j	800018e0 <_printk_dec_ulong+0xd4>

80001958 <__printk_hook_install>:
80001958:	800037b7          	lui	a5,0x80003
8000195c:	3ca7ae23          	sw	a0,988(a5) # 800033dc <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800033dd>
80001960:	00008067          	ret

80001964 <_vprintk>:
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
80001964:	fb010113          	addi	sp,sp,-80
80001968:	04812423          	sw	s0,72(sp)
8000196c:	04912223          	sw	s1,68(sp)
80001970:	05212023          	sw	s2,64(sp)
80001974:	03312e23          	sw	s3,60(sp)
80001978:	03412c23          	sw	s4,56(sp)
8000197c:	03512a23          	sw	s5,52(sp)
80001980:	03612823          	sw	s6,48(sp)
80001984:	03712623          	sw	s7,44(sp)
80001988:	03912223          	sw	s9,36(sp)
8000198c:	03a12023          	sw	s10,32(sp)
80001990:	04112623          	sw	ra,76(sp)
80001994:	03812423          	sw	s8,40(sp)
80001998:	01b12e23          	sw	s11,28(sp)
8000199c:	00050413          	mv	s0,a0
800019a0:	00058493          	mv	s1,a1
800019a4:	00060b93          	mv	s7,a2
800019a8:	00068d13          	mv	s10,a3
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int min_width = -1;
	int long_ctr = 0;
800019ac:	00000a93          	li	s5,0
	int min_width = -1;
800019b0:	fff00913          	li	s2,-1
	enum pad_type padding = PAD_NONE;
800019b4:	00000993          	li	s3,0
	int might_format = 0; /* 1 if encountered a '%' */
800019b8:	00000c93          	li	s9,0
				/* FIXME: do nothing for these modifiers */
				goto still_might_format;
			case 'd':
			case 'i': {
				long d;
				if (long_ctr < 2) {
800019bc:	00100a13          	li	s4,1
	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
800019c0:	03000b13          	li	s6,48
	while (*fmt) {
800019c4:	000bc503          	lbu	a0,0(s7)
800019c8:	04051063          	bnez	a0,80001a08 <_vprintk+0xa4>
}
800019cc:	04c12083          	lw	ra,76(sp)
800019d0:	04812403          	lw	s0,72(sp)
800019d4:	04412483          	lw	s1,68(sp)
800019d8:	04012903          	lw	s2,64(sp)
800019dc:	03c12983          	lw	s3,60(sp)
800019e0:	03812a03          	lw	s4,56(sp)
800019e4:	03412a83          	lw	s5,52(sp)
800019e8:	03012b03          	lw	s6,48(sp)
800019ec:	02c12b83          	lw	s7,44(sp)
800019f0:	02812c03          	lw	s8,40(sp)
800019f4:	02412c83          	lw	s9,36(sp)
800019f8:	02012d03          	lw	s10,32(sp)
800019fc:	01c12d83          	lw	s11,28(sp)
80001a00:	05010113          	addi	sp,sp,80
80001a04:	00008067          	ret
		if (!might_format) {
80001a08:	000c9e63          	bnez	s9,80001a24 <_vprintk+0xc0>
			if (*fmt != '%') {
80001a0c:	02500693          	li	a3,37
80001a10:	2cd50e63          	beq	a0,a3,80001cec <_vprintk+0x388>
				out((int)*fmt, ctx);
80001a14:	00048593          	mv	a1,s1
80001a18:	000400e7          	jalr	s0
		++fmt;
80001a1c:	001b8b93          	addi	s7,s7,1
80001a20:	fa5ff06f          	j	800019c4 <_vprintk+0x60>
			switch (*fmt) {
80001a24:	06400693          	li	a3,100
80001a28:	10d50263          	beq	a0,a3,80001b2c <_vprintk+0x1c8>
80001a2c:	04a6ee63          	bltu	a3,a0,80001a88 <_vprintk+0x124>
80001a30:	03900693          	li	a3,57
80001a34:	02a6e663          	bltu	a3,a0,80001a60 <_vprintk+0xfc>
80001a38:	03100693          	li	a3,49
80001a3c:	0cd57863          	bleu	a3,a0,80001b0c <_vprintk+0x1a8>
80001a40:	02d00693          	li	a3,45
80001a44:	0ad50463          	beq	a0,a3,80001aec <_vprintk+0x188>
80001a48:	0b650663          	beq	a0,s6,80001af4 <_vprintk+0x190>
80001a4c:	02500713          	li	a4,37
80001a50:	02e51063          	bne	a0,a4,80001a70 <_vprintk+0x10c>
				out((int)'%', ctx);
80001a54:	00048593          	mv	a1,s1
				out((int)*fmt, ctx);
80001a58:	000400e7          	jalr	s0
80001a5c:	1100006f          	j	80001b6c <_vprintk+0x208>
			switch (*fmt) {
80001a60:	05800693          	li	a3,88
80001a64:	16d50463          	beq	a0,a3,80001bcc <_vprintk+0x268>
80001a68:	06300713          	li	a4,99
80001a6c:	26e50463          	beq	a0,a4,80001cd4 <_vprintk+0x370>
				out((int)'%', ctx);
80001a70:	00048593          	mv	a1,s1
80001a74:	02500513          	li	a0,37
80001a78:	000400e7          	jalr	s0
				out((int)*fmt, ctx);
80001a7c:	00048593          	mv	a1,s1
80001a80:	000bc503          	lbu	a0,0(s7)
80001a84:	fd5ff06f          	j	80001a58 <_vprintk+0xf4>
			switch (*fmt) {
80001a88:	07000693          	li	a3,112
80001a8c:	12d50063          	beq	a0,a3,80001bac <_vprintk+0x248>
80001a90:	02a6e063          	bltu	a3,a0,80001ab0 <_vprintk+0x14c>
80001a94:	06900693          	li	a3,105
80001a98:	08d50a63          	beq	a0,a3,80001b2c <_vprintk+0x1c8>
80001a9c:	06c00693          	li	a3,108
80001aa0:	08d50263          	beq	a0,a3,80001b24 <_vprintk+0x1c0>
80001aa4:	06800693          	li	a3,104
80001aa8:	f6d50ae3          	beq	a0,a3,80001a1c <_vprintk+0xb8>
80001aac:	fc5ff06f          	j	80001a70 <_vprintk+0x10c>
80001ab0:	07500693          	li	a3,117
80001ab4:	0cd50a63          	beq	a0,a3,80001b88 <_vprintk+0x224>
80001ab8:	02a6e263          	bltu	a3,a0,80001adc <_vprintk+0x178>
80001abc:	07300713          	li	a4,115
80001ac0:	fae518e3          	bne	a0,a4,80001a70 <_vprintk+0x10c>
				char *s = va_arg(ap, char *);
80001ac4:	000d2c03          	lw	s8,0(s10)
80001ac8:	004d0c93          	addi	s9,s10,4
				while (*s)
80001acc:	000c4503          	lbu	a0,0(s8)
80001ad0:	1e051a63          	bnez	a0,80001cc4 <_vprintk+0x360>
				char *s = va_arg(ap, char *);
80001ad4:	000c8d13          	mv	s10,s9
80001ad8:	0940006f          	j	80001b6c <_vprintk+0x208>
			switch (*fmt) {
80001adc:	07800693          	li	a3,120
80001ae0:	0ed50663          	beq	a0,a3,80001bcc <_vprintk+0x268>
80001ae4:	07a00693          	li	a3,122
80001ae8:	fc1ff06f          	j	80001aa8 <_vprintk+0x144>
				padding = PAD_SPACE_AFTER;
80001aec:	00300993          	li	s3,3
80001af0:	f2dff06f          	j	80001a1c <_vprintk+0xb8>
				if (min_width < 0 && padding == PAD_NONE) {
80001af4:	00095e63          	bgez	s2,80001b10 <_vprintk+0x1ac>
80001af8:	20098463          	beqz	s3,80001d00 <_vprintk+0x39c>
					min_width = *fmt - '0';
80001afc:	fd050913          	addi	s2,a0,-48
				if (padding == PAD_NONE) {
80001b00:	f0099ee3          	bnez	s3,80001a1c <_vprintk+0xb8>
					padding = PAD_SPACE_BEFORE;
80001b04:	00200993          	li	s3,2
80001b08:	f15ff06f          	j	80001a1c <_vprintk+0xb8>
				if (min_width < 0) {
80001b0c:	fe0948e3          	bltz	s2,80001afc <_vprintk+0x198>
					min_width = 10 * min_width + *fmt - '0';
80001b10:	00a00693          	li	a3,10
80001b14:	02d90933          	mul	s2,s2,a3
80001b18:	00a90933          	add	s2,s2,a0
80001b1c:	fd090913          	addi	s2,s2,-48
80001b20:	fe1ff06f          	j	80001b00 <_vprintk+0x19c>
				long_ctr++;
80001b24:	001a8a93          	addi	s5,s5,1
80001b28:	ef5ff06f          	j	80001a1c <_vprintk+0xb8>
				if (long_ctr < 2) {
80001b2c:	055a4463          	blt	s4,s5,80001b74 <_vprintk+0x210>
					d = va_arg(ap, long);
80001b30:	000d2603          	lw	a2,0(s10)
80001b34:	004d0d13          	addi	s10,s10,4
				if (d < 0) {
80001b38:	02065063          	bgez	a2,80001b58 <_vprintk+0x1f4>
80001b3c:	00c12223          	sw	a2,4(sp)
					out((int)'-', ctx);
80001b40:	00048593          	mv	a1,s1
80001b44:	02d00513          	li	a0,45
80001b48:	000400e7          	jalr	s0
					d = -d;
80001b4c:	00412603          	lw	a2,4(sp)
					min_width--;
80001b50:	fff90913          	addi	s2,s2,-1
					d = -d;
80001b54:	40c00633          	neg	a2,a2
				_printk_dec_ulong(out, ctx, u, padding,
80001b58:	00090713          	mv	a4,s2
80001b5c:	00098693          	mv	a3,s3
80001b60:	00048593          	mv	a1,s1
80001b64:	00040513          	mv	a0,s0
80001b68:	ca5ff0ef          	jal	ra,8000180c <_printk_dec_ulong>
			might_format = 0;
80001b6c:	00000c93          	li	s9,0
				break;
80001b70:	eadff06f          	j	80001a1c <_vprintk+0xb8>
					d = (long)va_arg(ap, long long);
80001b74:	007d0793          	addi	a5,s10,7
80001b78:	ff87f713          	andi	a4,a5,-8
80001b7c:	00870d13          	addi	s10,a4,8
80001b80:	00072603          	lw	a2,0(a4)
80001b84:	fb5ff06f          	j	80001b38 <_vprintk+0x1d4>
				if (long_ctr < 2) {
80001b88:	015a4863          	blt	s4,s5,80001b98 <_vprintk+0x234>
					u = va_arg(ap, unsigned long);
80001b8c:	000d2603          	lw	a2,0(s10)
80001b90:	004d0d13          	addi	s10,s10,4
80001b94:	fc5ff06f          	j	80001b58 <_vprintk+0x1f4>
					u = (unsigned long)va_arg(ap,
80001b98:	007d0793          	addi	a5,s10,7
80001b9c:	ff87f713          	andi	a4,a5,-8
80001ba0:	00870d13          	addi	s10,a4,8
80001ba4:	00072603          	lw	a2,0(a4)
80001ba8:	fb1ff06f          	j	80001b58 <_vprintk+0x1f4>
				  out('0', ctx);
80001bac:	00048593          	mv	a1,s1
80001bb0:	000b0513          	mv	a0,s6
80001bb4:	000400e7          	jalr	s0
				  out('x', ctx);
80001bb8:	00048593          	mv	a1,s1
80001bbc:	07800513          	li	a0,120
80001bc0:	000400e7          	jalr	s0
				  min_width = 8;
80001bc4:	00800913          	li	s2,8
				  padding = PAD_ZERO_BEFORE;
80001bc8:	000a0993          	mv	s3,s4
				if (long_ctr < 2) {
80001bcc:	055a4663          	blt	s4,s5,80001c18 <_vprintk+0x2b4>
					x = va_arg(ap, unsigned long);
80001bd0:	000d2783          	lw	a5,0(s10)
80001bd4:	004d0d13          	addi	s10,s10,4
80001bd8:	00f12223          	sw	a5,4(sp)
	int remaining = 8; /* 8 digits max */
80001bdc:	00800813          	li	a6,8
	int digits = 0;
80001be0:	00000c13          	li	s8,0
	int found_largest_digit = 0;
80001be4:	00012623          	sw	zero,12(sp)
	int size = sizeof(num) * 2;
80001be8:	00080d93          	mv	s11,a6
		char nibble = (num >> ((size - 1) << 2) & 0xf);
80001bec:	00412783          	lw	a5,4(sp)
80001bf0:	fffd8d93          	addi	s11,s11,-1
80001bf4:	002d9693          	slli	a3,s11,0x2
80001bf8:	00d7d6b3          	srl	a3,a5,a3
80001bfc:	00f6f693          	andi	a3,a3,15
		if (nibble || found_largest_digit || size == 1) {
80001c00:	02069c63          	bnez	a3,80001c38 <_vprintk+0x2d4>
80001c04:	00c12783          	lw	a5,12(sp)
80001c08:	00079463          	bnez	a5,80001c10 <_vprintk+0x2ac>
80001c0c:	080d9263          	bnez	s11,80001c90 <_vprintk+0x32c>
			nibble += nibble > 9 ? 87 : 48;
80001c10:	000b0513          	mv	a0,s6
80001c14:	0300006f          	j	80001c44 <_vprintk+0x2e0>
					x = (unsigned long)va_arg(ap,
80001c18:	007d0793          	addi	a5,s10,7
80001c1c:	ff87f693          	andi	a3,a5,-8
80001c20:	0006a783          	lw	a5,0(a3)
80001c24:	00868d13          	addi	s10,a3,8
80001c28:	00f12223          	sw	a5,4(sp)
80001c2c:	fb1ff06f          	j	80001bdc <_vprintk+0x278>
	for (; size; size--) {
80001c30:	00812803          	lw	a6,8(sp)
80001c34:	fb9ff06f          	j	80001bec <_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
80001c38:	00900793          	li	a5,9
80001c3c:	05700513          	li	a0,87
80001c40:	fcd7f8e3          	bleu	a3,a5,80001c10 <_vprintk+0x2ac>
80001c44:	01012423          	sw	a6,8(sp)
			out((int)nibble, ctx);
80001c48:	00048593          	mv	a1,s1
80001c4c:	00a68533          	add	a0,a3,a0
80001c50:	000400e7          	jalr	s0
			digits++;
80001c54:	001c0c13          	addi	s8,s8,1
			found_largest_digit = 1;
80001c58:	01912623          	sw	s9,12(sp)
	for (; size; size--) {
80001c5c:	fc0d9ae3          	bnez	s11,80001c30 <_vprintk+0x2cc>
				out(' ', ctx);
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
80001c60:	00300693          	li	a3,3
			might_format = 0;
80001c64:	00000c93          	li	s9,0
	if (padding == PAD_SPACE_AFTER) {
80001c68:	dad99ae3          	bne	s3,a3,80001a1c <_vprintk+0xb8>
		remaining = min_width * 2 - digits;
80001c6c:	00191713          	slli	a4,s2,0x1
80001c70:	41870c33          	sub	s8,a4,s8
		while (remaining-- > 0) {
			out(' ', ctx);
80001c74:	02000c93          	li	s9,32
		while (remaining-- > 0) {
80001c78:	ef805ae3          	blez	s8,80001b6c <_vprintk+0x208>
			out(' ', ctx);
80001c7c:	00048593          	mv	a1,s1
80001c80:	000c8513          	mv	a0,s9
80001c84:	000400e7          	jalr	s0
80001c88:	fffc0c13          	addi	s8,s8,-1
80001c8c:	fedff06f          	j	80001c78 <_vprintk+0x314>
		if (remaining-- <= min_width) {
80001c90:	fff80793          	addi	a5,a6,-1
80001c94:	00f12423          	sw	a5,8(sp)
80001c98:	fd0942e3          	blt	s2,a6,80001c5c <_vprintk+0x2f8>
			if (padding == PAD_ZERO_BEFORE) {
80001c9c:	01499a63          	bne	s3,s4,80001cb0 <_vprintk+0x34c>
				out('0', ctx);
80001ca0:	00048593          	mv	a1,s1
80001ca4:	000b0513          	mv	a0,s6
				out(' ', ctx);
80001ca8:	000400e7          	jalr	s0
80001cac:	fb1ff06f          	j	80001c5c <_vprintk+0x2f8>
			} else if (padding == PAD_SPACE_BEFORE) {
80001cb0:	00200793          	li	a5,2
80001cb4:	faf994e3          	bne	s3,a5,80001c5c <_vprintk+0x2f8>
				out(' ', ctx);
80001cb8:	00048593          	mv	a1,s1
80001cbc:	02000513          	li	a0,32
80001cc0:	fe9ff06f          	j	80001ca8 <_vprintk+0x344>
					out((int)(*s++), ctx);
80001cc4:	00048593          	mv	a1,s1
80001cc8:	001c0c13          	addi	s8,s8,1
80001ccc:	000400e7          	jalr	s0
80001cd0:	dfdff06f          	j	80001acc <_vprintk+0x168>
				out(c, ctx);
80001cd4:	000d2503          	lw	a0,0(s10)
				int c = va_arg(ap, int);
80001cd8:	004d0c13          	addi	s8,s10,4
				out(c, ctx);
80001cdc:	00048593          	mv	a1,s1
80001ce0:	000400e7          	jalr	s0
				int c = va_arg(ap, int);
80001ce4:	000c0d13          	mv	s10,s8
80001ce8:	e85ff06f          	j	80001b6c <_vprintk+0x208>
				long_ctr = 0;
80001cec:	00000a93          	li	s5,0
				min_width = -1;
80001cf0:	fff00913          	li	s2,-1
				padding = PAD_NONE;
80001cf4:	00000993          	li	s3,0
				might_format = 1;
80001cf8:	000a0c93          	mv	s9,s4
80001cfc:	d21ff06f          	j	80001a1c <_vprintk+0xb8>
					padding = PAD_ZERO_BEFORE;
80001d00:	000a0993          	mv	s3,s4
80001d04:	d19ff06f          	j	80001a1c <_vprintk+0xb8>

80001d08 <vprintk>:
{
80001d08:	fe010113          	addi	sp,sp,-32
	_vprintk((out_func_t)char_out, &ctx, fmt, ap);
80001d0c:	00050613          	mv	a2,a0
80001d10:	80001537          	lui	a0,0x80001
80001d14:	00058693          	mv	a3,a1
80001d18:	7f450513          	addi	a0,a0,2036 # 800017f4 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800017f5>
80001d1c:	00c10593          	addi	a1,sp,12
{
80001d20:	00112e23          	sw	ra,28(sp)
	struct out_context ctx = { 0 };
80001d24:	00012623          	sw	zero,12(sp)
	_vprintk((out_func_t)char_out, &ctx, fmt, ap);
80001d28:	c3dff0ef          	jal	ra,80001964 <_vprintk>
}
80001d2c:	01c12083          	lw	ra,28(sp)
80001d30:	00c12503          	lw	a0,12(sp)
80001d34:	02010113          	addi	sp,sp,32
80001d38:	00008067          	ret

80001d3c <printk>:
{
80001d3c:	fc010113          	addi	sp,sp,-64
80001d40:	02b12223          	sw	a1,36(sp)
	va_start(ap, fmt);
80001d44:	02410593          	addi	a1,sp,36
{
80001d48:	00112e23          	sw	ra,28(sp)
80001d4c:	02c12423          	sw	a2,40(sp)
80001d50:	02d12623          	sw	a3,44(sp)
80001d54:	02e12823          	sw	a4,48(sp)
80001d58:	02f12a23          	sw	a5,52(sp)
80001d5c:	03012c23          	sw	a6,56(sp)
80001d60:	03112e23          	sw	a7,60(sp)
	va_start(ap, fmt);
80001d64:	00b12623          	sw	a1,12(sp)
	ret = vprintk(fmt, ap);
80001d68:	fa1ff0ef          	jal	ra,80001d08 <vprintk>
}
80001d6c:	01c12083          	lw	ra,28(sp)
80001d70:	04010113          	addi	sp,sp,64
80001d74:	00008067          	ret

80001d78 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_CROSS_COMPILE, 1);
GEN_ABSOLUTE_SYM(CONFIG_APP_DRIVERS, 1);
GEN_ABSOLUTE_SYM(CONFIG_UART_CONSOLE, 1);
GEN_ABSOLUTE_SYM(CONFIG_SOC_FAMILY, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_IEEE802154_DRIVER_LEVEL, 0);
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
80001d78:	00008067          	ret

80001d7c <k_cpu_idle>:
 */
static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	unsigned int mstatus;

	__asm__ volatile ("csrrs %0, mstatus, %1"
80001d7c:	00800793          	li	a5,8
80001d80:	3007a7f3          	csrrs	a5,mstatus,a5
#endif
	/* unlock interrupts */
	irq_unlock(key);

	/* Wait for interrupt */
	__asm__ volatile("wfi");
80001d84:	10500073          	wfi
80001d88:	00008067          	ret
80001d8c:	00800793          	li	a5,8
80001d90:	3007a7f3          	csrrs	a5,mstatus,a5
80001d94:	00008067          	ret

80001d98 <_arch_irq_enable>:
#endif

	__asm__ volatile ("csrr %0, mie" : "=r" (mie));

	return !!(mie & (1 << irq));
}
80001d98:	00b00713          	li	a4,11
80001d9c:	00050793          	mv	a5,a0
80001da0:	00a77463          	bleu	a0,a4,80001da8 <_arch_irq_enable+0x10>
80001da4:	94dff06f          	j	800016f0 <riscv_plic_irq_enable>
80001da8:	00100513          	li	a0,1
80001dac:	00f51533          	sll	a0,a0,a5
80001db0:	30452573          	csrrs	a0,mie,a0
80001db4:	00008067          	ret

80001db8 <_arch_irq_disable>:
80001db8:	00b00713          	li	a4,11
80001dbc:	00050793          	mv	a5,a0
80001dc0:	00a77463          	bleu	a0,a4,80001dc8 <_arch_irq_disable+0x10>
80001dc4:	969ff06f          	j	8000172c <riscv_plic_irq_disable>
80001dc8:	00100513          	li	a0,1
80001dcc:	00f51533          	sll	a0,a0,a5
80001dd0:	30453573          	csrrc	a0,mie,a0
80001dd4:	00008067          	ret

80001dd8 <soc_interrupt_init>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
80001dd8:	00800793          	li	a5,8
80001ddc:	3007b7f3          	csrrc	a5,mstatus,a5
void soc_interrupt_init(void)
{
	/* ensure that all interrupts are disabled */
	(void)irq_lock();

	__asm__ volatile ("csrwi mie, 0\n"
80001de0:	30405073          	csrwi	mie,0
80001de4:	34405073          	csrwi	mip,0
80001de8:	00008067          	ret

80001dec <__start>:

	/*
	 * Initially, setup stack pointer to
	 * _interrupt_stack + CONFIG_ISR_STACK_SIZE
	 */
	la sp, _interrupt_stack
80001dec:	00002117          	auipc	sp,0x2
80001df0:	e7410113          	addi	sp,sp,-396 # 80003c60 <_interrupt_stack>
	li t0, CONFIG_ISR_STACK_SIZE
80001df4:	000012b7          	lui	t0,0x1
80001df8:	80028293          	addi	t0,t0,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
	add sp, sp, t0
80001dfc:	00510133          	add	sp,sp,t0

	/*
	 * Jump into C domain. _PrepC zeroes BSS, copies rw data into RAM,
	 * and then enters kernel _Cstart
	 */
	call _PrepC
80001e00:	298000ef          	jal	ra,80002098 <_PrepC>

80001e04 <_SysFatalErrorHandler>:
80001e04:	ff010113          	addi	sp,sp,-16
 *
 * @return N/A
 */
FUNC_NORETURN __weak void _SysFatalErrorHandler(unsigned int reason,
						const NANO_ESF *esf)
{
80001e08:	00112623          	sw	ra,12(sp)
80001e0c:	00812423          	sw	s0,8(sp)
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
80001e10:	00600793          	li	a5,6
80001e14:	02f50463          	beq	a0,a5,80001e3c <_SysFatalErrorHandler+0x38>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
80001e18:	50d000ef          	jal	ra,80002b24 <k_is_in_isr>
80001e1c:	02050463          	beqz	a0,80001e44 <_SysFatalErrorHandler+0x40>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
80001e20:	505000ef          	jal	ra,80002b24 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
80001e24:	04051663          	bnez	a0,80001e70 <_SysFatalErrorHandler+0x6c>
80001e28:	800035b7          	lui	a1,0x80003
80001e2c:	1b858593          	addi	a1,a1,440 # 800031b8 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800031b9>
80001e30:	80003537          	lui	a0,0x80003
80001e34:	1cc50513          	addi	a0,a0,460 # 800031cc <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800031cd>
80001e38:	f05ff0ef          	jal	ra,80001d3c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
80001e3c:	f41ff0ef          	jal	ra,80001d7c <k_cpu_idle>
80001e40:	ffdff06f          	j	80001e3c <_SysFatalErrorHandler+0x38>
	if (k_is_in_isr() || _is_thread_essential()) {
80001e44:	4f1000ef          	jal	ra,80002b34 <_is_thread_essential>
80001e48:	fc051ce3          	bnez	a0,80001e20 <_SysFatalErrorHandler+0x1c>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
80001e4c:	80003437          	lui	s0,0x80003
80001e50:	53040413          	addi	s0,s0,1328 # 80003530 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003531>
80001e54:	00842583          	lw	a1,8(s0)
80001e58:	80003537          	lui	a0,0x80003
80001e5c:	1ec50513          	addi	a0,a0,492 # 800031ec <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800031ed>
80001e60:	eddff0ef          	jal	ra,80001d3c <printk>
	k_thread_abort(_current);
80001e64:	00842503          	lw	a0,8(s0)
80001e68:	6cd000ef          	jal	ra,80002d34 <k_thread_abort>
80001e6c:	fd1ff06f          	j	80001e3c <_SysFatalErrorHandler+0x38>
		printk("Fatal fault in %s! Spinning...\n",
80001e70:	800035b7          	lui	a1,0x80003
80001e74:	1b458593          	addi	a1,a1,436 # 800031b4 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800031b5>
80001e78:	fb9ff06f          	j	80001e30 <_SysFatalErrorHandler+0x2c>

80001e7c <_NanoFatalErrorHandler>:
{
80001e7c:	fb010113          	addi	sp,sp,-80
80001e80:	04812423          	sw	s0,72(sp)
80001e84:	04912223          	sw	s1,68(sp)
80001e88:	04112623          	sw	ra,76(sp)
	switch (reason) {
80001e8c:	00600793          	li	a5,6
{
80001e90:	00050493          	mv	s1,a0
80001e94:	00058413          	mv	s0,a1
	switch (reason) {
80001e98:	10a7ec63          	bltu	a5,a0,80001fb0 <_NanoFatalErrorHandler+0x134>
80001e9c:	80003737          	lui	a4,0x80003
80001ea0:	00251793          	slli	a5,a0,0x2
80001ea4:	f3470713          	addi	a4,a4,-204 # 80002f34 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002f35>
80001ea8:	00e787b3          	add	a5,a5,a4
80001eac:	0007a783          	lw	a5,0(a5)
80001eb0:	00078067          	jr	a5
		printk("***** _NANO_ERR_CPU_EXCEPTION! *****\n");
80001eb4:	80003537          	lui	a0,0x80003
80001eb8:	fbc50513          	addi	a0,a0,-68 # 80002fbc <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002fbd>
		printk("***** _NANO_ERR_SPURIOUS_INT! *****\n");
80001ebc:	e81ff0ef          	jal	ra,80001d3c <printk>
	printk("Current thread ID = %p\n"
80001ec0:	7d0000ef          	jal	ra,80002690 <k_current_get>
	       (esf->mepc == 0xdeadbaad) ? 0xdeadbaad : esf->mepc - 4,
80001ec4:	04842783          	lw	a5,72(s0)
	printk("Current thread ID = %p\n"
80001ec8:	deadc737          	lui	a4,0xdeadc
80001ecc:	aad70713          	addi	a4,a4,-1363 # deadbaad <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0xdeadbaae>
80001ed0:	00050593          	mv	a1,a0
80001ed4:	00078613          	mv	a2,a5
80001ed8:	00e78463          	beq	a5,a4,80001ee0 <_NanoFatalErrorHandler+0x64>
80001edc:	ffc78613          	addi	a2,a5,-4
80001ee0:	04442503          	lw	a0,68(s0)
80001ee4:	01042883          	lw	a7,16(s0)
80001ee8:	00c42803          	lw	a6,12(s0)
80001eec:	00842783          	lw	a5,8(s0)
80001ef0:	00442703          	lw	a4,4(s0)
80001ef4:	00042683          	lw	a3,0(s0)
80001ef8:	02a12823          	sw	a0,48(sp)
80001efc:	04042503          	lw	a0,64(s0)
80001f00:	02a12623          	sw	a0,44(sp)
80001f04:	03c42503          	lw	a0,60(s0)
80001f08:	02a12423          	sw	a0,40(sp)
80001f0c:	03842503          	lw	a0,56(s0)
80001f10:	02a12223          	sw	a0,36(sp)
80001f14:	03442503          	lw	a0,52(s0)
80001f18:	02a12023          	sw	a0,32(sp)
80001f1c:	03042503          	lw	a0,48(s0)
80001f20:	00a12e23          	sw	a0,28(sp)
80001f24:	02c42503          	lw	a0,44(s0)
80001f28:	00a12c23          	sw	a0,24(sp)
80001f2c:	02842503          	lw	a0,40(s0)
80001f30:	00a12a23          	sw	a0,20(sp)
80001f34:	02442503          	lw	a0,36(s0)
80001f38:	00a12823          	sw	a0,16(sp)
80001f3c:	02042503          	lw	a0,32(s0)
80001f40:	00a12623          	sw	a0,12(sp)
80001f44:	01c42503          	lw	a0,28(s0)
80001f48:	00a12423          	sw	a0,8(sp)
80001f4c:	01842503          	lw	a0,24(s0)
80001f50:	00a12223          	sw	a0,4(sp)
80001f54:	01442503          	lw	a0,20(s0)
80001f58:	00a12023          	sw	a0,0(sp)
80001f5c:	80003537          	lui	a0,0x80003
80001f60:	0bc50513          	addi	a0,a0,188 # 800030bc <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800030bd>
80001f64:	dd9ff0ef          	jal	ra,80001d3c <printk>
	_SysFatalErrorHandler(reason, esf);
80001f68:	00040593          	mv	a1,s0
80001f6c:	00048513          	mv	a0,s1
80001f70:	e95ff0ef          	jal	ra,80001e04 <_SysFatalErrorHandler>
		printk("***** _NANO_ERR_SPURIOUS_INT! *****\n");
80001f74:	80003537          	lui	a0,0x80003
80001f78:	fe450513          	addi	a0,a0,-28 # 80002fe4 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002fe5>
80001f7c:	f41ff06f          	j	80001ebc <_NanoFatalErrorHandler+0x40>
		printk("***** Invalid Exit Software Error! *****\n");
80001f80:	80003537          	lui	a0,0x80003
80001f84:	00c50513          	addi	a0,a0,12 # 8000300c <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x8000300d>
80001f88:	f35ff06f          	j	80001ebc <_NanoFatalErrorHandler+0x40>
		printk("**** Kernel Allocation Failure! ****\n");
80001f8c:	80003537          	lui	a0,0x80003
80001f90:	03850513          	addi	a0,a0,56 # 80003038 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003039>
80001f94:	f29ff06f          	j	80001ebc <_NanoFatalErrorHandler+0x40>
		printk("***** Kernel OOPS! *****\n");
80001f98:	80003537          	lui	a0,0x80003
80001f9c:	06050513          	addi	a0,a0,96 # 80003060 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003061>
80001fa0:	f1dff06f          	j	80001ebc <_NanoFatalErrorHandler+0x40>
		printk("***** Kernel Panic! *****\n");
80001fa4:	80003537          	lui	a0,0x80003
80001fa8:	07c50513          	addi	a0,a0,124 # 8000307c <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x8000307d>
80001fac:	f11ff06f          	j	80001ebc <_NanoFatalErrorHandler+0x40>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
80001fb0:	80003537          	lui	a0,0x80003
80001fb4:	00048593          	mv	a1,s1
80001fb8:	09850513          	addi	a0,a0,152 # 80003098 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003099>
80001fbc:	d81ff0ef          	jal	ra,80001d3c <printk>
		break;
80001fc0:	f01ff06f          	j	80001ec0 <_NanoFatalErrorHandler+0x44>

80001fc4 <_Fault>:
	}
}


FUNC_NORETURN void _Fault(const NANO_ESF *esf)
{
80001fc4:	ff010113          	addi	sp,sp,-16
80001fc8:	00912223          	sw	s1,4(sp)
80001fcc:	00112623          	sw	ra,12(sp)
80001fd0:	00812423          	sw	s0,8(sp)
80001fd4:	00050493          	mv	s1,a0
	u32_t mcause;
	u32_t mtvec;

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
80001fd8:	34202473          	csrr	s0,mcause
	__asm__ volatile("csrr %0, mtvec" : "=r" (mtvec));
80001fdc:	30502673          	csrr	a2,mtvec


	printk("FATAL fault, mcause= 0x%08x, mtvec= 0x%08x \n", mcause, mtvec);
80001fe0:	80003537          	lui	a0,0x80003
80001fe4:	00040593          	mv	a1,s0
80001fe8:	f7050513          	addi	a0,a0,-144 # 80002f70 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002f71>
80001fec:	d51ff0ef          	jal	ra,80001d3c <printk>

	mcause &= SOC_MCAUSE_EXP_MASK;
80001ff0:	800007b7          	lui	a5,0x80000
80001ff4:	fff7c793          	not	a5,a5
80001ff8:	00f47433          	and	s0,s0,a5
80001ffc:	00500793          	li	a5,5
80002000:	0287ea63          	bltu	a5,s0,80002034 <_Fault+0x70>
80002004:	80003737          	lui	a4,0x80003
80002008:	00241793          	slli	a5,s0,0x2
8000200c:	f5070713          	addi	a4,a4,-176 # 80002f50 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002f51>
80002010:	00f707b3          	add	a5,a4,a5
80002014:	0007a583          	lw	a1,0(a5) # 80000000 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80000001>

	printk("Exception cause %s (%d)\n", cause_str(mcause), (int)mcause);
80002018:	80003537          	lui	a0,0x80003
8000201c:	00040613          	mv	a2,s0
80002020:	fa050513          	addi	a0,a0,-96 # 80002fa0 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002fa1>
80002024:	d19ff0ef          	jal	ra,80001d3c <printk>

	//_NanoFatalErrorHandler(_NANO_ERR_CPU_EXCEPTION, esf);
	_NanoFatalErrorHandler(mcause, esf);
80002028:	00048593          	mv	a1,s1
8000202c:	00040513          	mv	a0,s0
80002030:	e4dff0ef          	jal	ra,80001e7c <_NanoFatalErrorHandler>
	mcause &= SOC_MCAUSE_EXP_MASK;
80002034:	800035b7          	lui	a1,0x80003
80002038:	f6858593          	addi	a1,a1,-152 # 80002f68 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002f69>
8000203c:	fddff06f          	j	80002018 <_Fault+0x54>

80002040 <_irq_spurious>:
#include <toolchain.h>
#include <kernel_structs.h>
#include <misc/printk.h>

void _irq_spurious(void *unused)
{
80002040:	ff010113          	addi	sp,sp,-16
80002044:	00112623          	sw	ra,12(sp)
80002048:	00812423          	sw	s0,8(sp)
	u32_t mcause;

	ARG_UNUSED(unused);

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
8000204c:	34202473          	csrr	s0,mcause

	mcause &= SOC_MCAUSE_EXP_MASK;
80002050:	800007b7          	lui	a5,0x80000
80002054:	fff7c793          	not	a5,a5
80002058:	00f47433          	and	s0,s0,a5

	printk("Spurious interrupt detected! IRQ: %d\n", (int)mcause);
8000205c:	80003537          	lui	a0,0x80003
80002060:	00040593          	mv	a1,s0
80002064:	2ec50513          	addi	a0,a0,748 # 800032ec <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800032ed>
80002068:	cd5ff0ef          	jal	ra,80001d3c <printk>
#if defined(CONFIG_RISCV_HAS_PLIC)
	if (mcause == RISCV_MACHINE_EXT_IRQ) {
8000206c:	00b00793          	li	a5,11
80002070:	00f41c63          	bne	s0,a5,80002088 <_irq_spurious+0x48>
		printk("PLIC interrupt line causing the IRQ: %d\n",
80002074:	f24ff0ef          	jal	ra,80001798 <riscv_plic_get_irq>
80002078:	00050593          	mv	a1,a0
8000207c:	80003537          	lui	a0,0x80003
80002080:	31450513          	addi	a0,a0,788 # 80003314 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003315>
80002084:	cb9ff0ef          	jal	ra,80001d3c <printk>
		       riscv_plic_get_irq());
	}
#endif

	_NanoFatalErrorHandler(_NANO_ERR_SPURIOUS_INT, &_default_esf);
80002088:	800035b7          	lui	a1,0x80003
8000208c:	21458593          	addi	a1,a1,532 # 80003214 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003215>
80002090:	00400513          	li	a0,4
80002094:	de9ff0ef          	jal	ra,80001e7c <_NanoFatalErrorHandler>

80002098 <_PrepC>:
 *
 * @return N/A
 */

void _PrepC(void)
{
80002098:	ff010113          	addi	sp,sp,-16
8000209c:	00112623          	sw	ra,12(sp)
	_bss_zero();
800020a0:	1b4000ef          	jal	ra,80002254 <_bss_zero>
#ifdef CONFIG_XIP
	_data_copy();
#endif
	_Cstart();
800020a4:	210000ef          	jal	ra,800022b4 <_Cstart>

800020a8 <_thread_entry_wrapper>:
	 * in registers a0, a1, a2 and a3. These registers are used as arguments
	 * to function _thread_entry. Hence, just call _thread_entry with
	 * return address set to 0 to indicate a non-returning function call.
	 */

	jal x0, _thread_entry
800020a8:	2a10006f          	j	80002b48 <_thread_entry>

800020ac <_new_thread>:

void _new_thread(struct k_thread *thread, char *stack_memory,
		 size_t stack_size, _thread_entry_t thread_func,
		 void *arg1, void *arg2, void *arg3,
		 int priority, unsigned int options)
{
800020ac:	fd010113          	addi	sp,sp,-48
800020b0:	01312e23          	sw	s3,28(sp)
800020b4:	00068993          	mv	s3,a3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
800020b8:	03012683          	lw	a3,48(sp)
800020bc:	02812423          	sw	s0,40(sp)
800020c0:	03212023          	sw	s2,32(sp)
800020c4:	00058413          	mv	s0,a1
800020c8:	00060913          	mv	s2,a2
800020cc:	00088593          	mv	a1,a7
800020d0:	00400613          	li	a2,4
800020d4:	02112623          	sw	ra,44(sp)
800020d8:	02912223          	sw	s1,36(sp)
800020dc:	00e12623          	sw	a4,12(sp)
800020e0:	00050493          	mv	s1,a0
800020e4:	00f12423          	sw	a5,8(sp)
800020e8:	01012223          	sw	a6,4(sp)
800020ec:	421000ef          	jal	ra,80002d0c <_init_thread_base>
				 stack_size - sizeof(struct __esf));

	/* Setup the initial stack frame */
	stack_init->a0 = (u32_t)thread_func;
	stack_init->a1 = (u32_t)arg1;
	stack_init->a2 = (u32_t)arg2;
800020f0:	00812783          	lw	a5,8(sp)
		STACK_ROUND_DOWN(stack_memory +
800020f4:	fb090593          	addi	a1,s2,-80
800020f8:	00b405b3          	add	a1,s0,a1

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
800020fc:	0404ae23          	sw	zero,92(s1)
	thread->fn_abort = NULL;
80002100:	0604a023          	sw	zero,96(s1)
80002104:	ff05f593          	andi	a1,a1,-16
	stack_init->a2 = (u32_t)arg2;
80002108:	02f5a823          	sw	a5,48(a1)
	 *    restored following the MSTATUS value set within the thread stack;
	 * 2) the core will jump to _thread_entry_wrapper, as the program
	 *    counter will be restored following the MEPC value set within the
	 *    thread stack.
	 */
	stack_init->mstatus = SOC_MSTATUS_DEF_RESTORE;
8000210c:	000027b7          	lui	a5,0x2
	stack_init->a1 = (u32_t)arg1;
80002110:	00c12703          	lw	a4,12(sp)
	stack_init->a3 = (u32_t)arg3;
80002114:	00412803          	lw	a6,4(sp)
	stack_init->mstatus = SOC_MSTATUS_DEF_RESTORE;
80002118:	88078793          	addi	a5,a5,-1920 # 1880 <CONFIG_ISR_STACK_SIZE+0x1080>
8000211c:	04f5a623          	sw	a5,76(a1)
	stack_init->mepc = (u32_t)_thread_entry_wrapper;

	thread->callee_saved.sp = (u32_t)stack_init;

	thread_monitor_init(thread);
}
80002120:	02c12083          	lw	ra,44(sp)
	stack_init->mepc = (u32_t)_thread_entry_wrapper;
80002124:	800027b7          	lui	a5,0x80002
80002128:	0a878793          	addi	a5,a5,168 # 800020a8 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800020a9>
	stack_init->a0 = (u32_t)thread_func;
8000212c:	0335a423          	sw	s3,40(a1)
	stack_init->a1 = (u32_t)arg1;
80002130:	02e5a623          	sw	a4,44(a1)
	stack_init->a3 = (u32_t)arg3;
80002134:	0305aa23          	sw	a6,52(a1)
	stack_init->mepc = (u32_t)_thread_entry_wrapper;
80002138:	04f5a423          	sw	a5,72(a1)
	thread->callee_saved.sp = (u32_t)stack_init;
8000213c:	02b4a423          	sw	a1,40(s1)
}
80002140:	02812403          	lw	s0,40(sp)
80002144:	02412483          	lw	s1,36(sp)
80002148:	02012903          	lw	s2,32(sp)
8000214c:	01c12983          	lw	s3,28(sp)
80002150:	03010113          	addi	sp,sp,48
80002154:	00008067          	ret

80002158 <_irq_do_offload>:
 */
void _irq_do_offload(void)
{
	irq_offload_routine_t tmp;

	if (!_offload_routine)
80002158:	800037b7          	lui	a5,0x80003
8000215c:	64c7a703          	lw	a4,1612(a5) # 8000364c <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x8000364d>
80002160:	00070c63          	beqz	a4,80002178 <_irq_do_offload+0x20>
		return;

	tmp = _offload_routine;
80002164:	64c7a303          	lw	t1,1612(a5)
	_offload_routine = NULL;
80002168:	6407a623          	sw	zero,1612(a5)

	tmp((void *)offload_param);
8000216c:	800037b7          	lui	a5,0x80003
80002170:	44c7a503          	lw	a0,1100(a5) # 8000344c <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x8000344d>
80002174:	00030067          	jr	t1
80002178:	00008067          	ret

8000217c <_sys_device_do_config_level>:
 */
void _sys_device_do_config_level(int level)
{
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
8000217c:	00251713          	slli	a4,a0,0x2
80002180:	800037b7          	lui	a5,0x80003
80002184:	00150513          	addi	a0,a0,1
80002188:	34078793          	addi	a5,a5,832 # 80003340 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003341>
8000218c:	00251513          	slli	a0,a0,0x2
{
80002190:	ff010113          	addi	sp,sp,-16
	for (info = config_levels[level]; info < config_levels[level+1];
80002194:	00e78733          	add	a4,a5,a4
80002198:	00a787b3          	add	a5,a5,a0
{
8000219c:	00812423          	sw	s0,8(sp)
800021a0:	00912223          	sw	s1,4(sp)
	for (info = config_levels[level]; info < config_levels[level+1];
800021a4:	00072403          	lw	s0,0(a4)
800021a8:	0007a483          	lw	s1,0(a5)
{
800021ac:	00112623          	sw	ra,12(sp)
	for (info = config_levels[level]; info < config_levels[level+1];
800021b0:	00946c63          	bltu	s0,s1,800021c8 <_sys_device_do_config_level+0x4c>
								info++) {
		struct device_config *device = info->config;

		device->init(info);
	}
}
800021b4:	00c12083          	lw	ra,12(sp)
800021b8:	00812403          	lw	s0,8(sp)
800021bc:	00412483          	lw	s1,4(sp)
800021c0:	01010113          	addi	sp,sp,16
800021c4:	00008067          	ret
		device->init(info);
800021c8:	00042783          	lw	a5,0(s0)
800021cc:	00040513          	mv	a0,s0
								info++) {
800021d0:	00c40413          	addi	s0,s0,12
		device->init(info);
800021d4:	0047a783          	lw	a5,4(a5)
800021d8:	000780e7          	jalr	a5
800021dc:	fd5ff06f          	j	800021b0 <_sys_device_do_config_level+0x34>

800021e0 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
800021e0:	ff010113          	addi	sp,sp,-16
800021e4:	00812423          	sw	s0,8(sp)
800021e8:	00912223          	sw	s1,4(sp)
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
800021ec:	80003437          	lui	s0,0x80003
800021f0:	800034b7          	lui	s1,0x80003
{
800021f4:	01212023          	sw	s2,0(sp)
800021f8:	00112623          	sw	ra,12(sp)
800021fc:	00050913          	mv	s2,a0
	for (info = __device_init_start; info != __device_init_end; info++) {
80002200:	3f040413          	addi	s0,s0,1008 # 800033f0 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800033f1>
80002204:	42048493          	addi	s1,s1,1056 # 80003420 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003421>
80002208:	00941663          	bne	s0,s1,80002214 <device_get_binding+0x34>
		if (info->driver_api && !strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
8000220c:	00000413          	li	s0,0
80002210:	0280006f          	j	80002238 <device_get_binding+0x58>
		if (info->driver_api && !strcmp(name, info->config->name)) {
80002214:	00442783          	lw	a5,4(s0)
80002218:	00079663          	bnez	a5,80002224 <device_get_binding+0x44>
	for (info = __device_init_start; info != __device_init_end; info++) {
8000221c:	00c40413          	addi	s0,s0,12
80002220:	fe9ff06f          	j	80002208 <device_get_binding+0x28>
		if (info->driver_api && !strcmp(name, info->config->name)) {
80002224:	00042783          	lw	a5,0(s0)
80002228:	00090513          	mv	a0,s2
8000222c:	0007a583          	lw	a1,0(a5)
80002230:	9f4ff0ef          	jal	ra,80001424 <strcmp>
80002234:	fe0514e3          	bnez	a0,8000221c <device_get_binding+0x3c>
}
80002238:	00c12083          	lw	ra,12(sp)
8000223c:	00040513          	mv	a0,s0
80002240:	00412483          	lw	s1,4(sp)
80002244:	00812403          	lw	s0,8(sp)
80002248:	00012903          	lw	s2,0(sp)
8000224c:	01010113          	addi	sp,sp,16
80002250:	00008067          	ret

80002254 <_bss_zero>:
	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
}

void __weak main(void)
{
80002254:	80003537          	lui	a0,0x80003
80002258:	800037b7          	lui	a5,0x80003
8000225c:	44050613          	addi	a2,a0,1088 # 80003440 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003441>
80002260:	66078793          	addi	a5,a5,1632 # 80003660 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003661>
80002264:	40c78633          	sub	a2,a5,a2
80002268:	00000593          	li	a1,0
8000226c:	44050513          	addi	a0,a0,1088
80002270:	9dcff06f          	j	8000144c <memset>

80002274 <_main>:
{
80002274:	ff010113          	addi	sp,sp,-16
	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
80002278:	00200513          	li	a0,2
{
8000227c:	00112623          	sw	ra,12(sp)
	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
80002280:	efdff0ef          	jal	ra,8000217c <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
80002284:	00300513          	li	a0,3
80002288:	ef5ff0ef          	jal	ra,8000217c <_sys_device_do_config_level>
	_init_static_threads();
8000228c:	1a5000ef          	jal	ra,80002c30 <_init_static_threads>
	main();
80002290:	b25fe0ef          	jal	ra,80000db4 <main>
	_main_thread->base.user_options &= ~K_ESSENTIAL;
80002294:	800037b7          	lui	a5,0x80003
80002298:	4c478793          	addi	a5,a5,1220 # 800034c4 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800034c5>
8000229c:	0087c703          	lbu	a4,8(a5)
800022a0:	ffe77713          	andi	a4,a4,-2
800022a4:	00e78423          	sb	a4,8(a5)
}
800022a8:	00c12083          	lw	ra,12(sp)
800022ac:	01010113          	addi	sp,sp,16
800022b0:	00008067          	ret

800022b4 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
800022b4:	f6010113          	addi	sp,sp,-160
800022b8:	08812c23          	sw	s0,152(sp)
	_current = dummy_thread;
800022bc:	80003437          	lui	s0,0x80003
800022c0:	53040793          	addi	a5,s0,1328 # 80003530 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003531>
800022c4:	01410713          	addi	a4,sp,20
{
800022c8:	08112e23          	sw	ra,156(sp)
800022cc:	08912a23          	sw	s1,148(sp)
800022d0:	09212823          	sw	s2,144(sp)
800022d4:	09312623          	sw	s3,140(sp)
	_current = dummy_thread;
800022d8:	00e7a423          	sw	a4,8(a5)
	dummy_thread->base.user_options = K_ESSENTIAL;
800022dc:	00100793          	li	a5,1
800022e0:	00f10e23          	sb	a5,28(sp)
	dummy_thread->base.thread_state = _THREAD_DUMMY;
800022e4:	00f10ea3          	sb	a5,29(sp)
}

static inline void _IntLibInit(void)
{
#if defined(CONFIG_RISCV_SOC_INTERRUPT_INIT)
	soc_interrupt_init();
800022e8:	af1ff0ef          	jal	ra,80001dd8 <soc_interrupt_init>
800022ec:	800037b7          	lui	a5,0x80003
800022f0:	54c78793          	addi	a5,a5,1356 # 8000354c <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x8000354d>
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
800022f4:	00000713          	li	a4,0
800022f8:	53040413          	addi	s0,s0,1328
800022fc:	02000693          	li	a3,32
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
80002300:	00f7a023          	sw	a5,0(a5)
	list->tail = (sys_dnode_t *)list;
80002304:	00f7a223          	sw	a5,4(a5)
80002308:	00170713          	addi	a4,a4,1
8000230c:	00878793          	addi	a5,a5,8
80002310:	fed718e3          	bne	a4,a3,80002300 <_Cstart+0x4c>
	_ready_q.cache = _main_thread;
80002314:	80003937          	lui	s2,0x80003
80002318:	4c490993          	addi	s3,s2,1220 # 800034c4 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800034c5>
8000231c:	01342a23          	sw	s3,20(s0)
	_new_thread(_main_thread, _main_stack,
80002320:	00100493          	li	s1,1
80002324:	800026b7          	lui	a3,0x80002
80002328:	800035b7          	lui	a1,0x80003
8000232c:	00000893          	li	a7,0
80002330:	00000813          	li	a6,0
80002334:	00000713          	li	a4,0
80002338:	27468693          	addi	a3,a3,628 # 80002274 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002275>
8000233c:	40000613          	li	a2,1024
80002340:	66058593          	addi	a1,a1,1632 # 80003660 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003661>
80002344:	4c490513          	addi	a0,s2,1220
80002348:	00912023          	sw	s1,0(sp)
8000234c:	00000793          	li	a5,0
80002350:	d5dff0ef          	jal	ra,800020ac <_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
80002354:	0099c783          	lbu	a5,9(s3)
	_add_thread_to_ready_q(_main_thread);
80002358:	4c490513          	addi	a0,s2,1220
	_new_thread(_idle_thread, _idle_stack,
8000235c:	80003937          	lui	s2,0x80003
80002360:	ffb7f793          	andi	a5,a5,-5
80002364:	00f984a3          	sb	a5,9(s3)
	_add_thread_to_ready_q(_main_thread);
80002368:	09c000ef          	jal	ra,80002404 <_add_thread_to_ready_q>
	_new_thread(_idle_thread, _idle_stack,
8000236c:	800036b7          	lui	a3,0x80003
80002370:	800045b7          	lui	a1,0x80004
80002374:	00f00893          	li	a7,15
80002378:	00000813          	li	a6,0
8000237c:	d8c68693          	addi	a3,a3,-628 # 80002d8c <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80002d8d>
80002380:	20000613          	li	a2,512
80002384:	a6058593          	addi	a1,a1,-1440 # 80003a60 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003a61>
80002388:	00000713          	li	a4,0
8000238c:	45890513          	addi	a0,s2,1112 # 80003458 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003459>
80002390:	00912023          	sw	s1,0(sp)
80002394:	00000793          	li	a5,0
80002398:	d15ff0ef          	jal	ra,800020ac <_new_thread>
8000239c:	45890993          	addi	s3,s2,1112
800023a0:	0099c783          	lbu	a5,9(s3)
	_add_thread_to_ready_q(_idle_thread);
800023a4:	45890513          	addi	a0,s2,1112
800023a8:	ffb7f793          	andi	a5,a5,-5
800023ac:	00f984a3          	sb	a5,9(s3)
800023b0:	054000ef          	jal	ra,80002404 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
800023b4:	800037b7          	lui	a5,0x80003
800023b8:	53c78793          	addi	a5,a5,1340 # 8000353c <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x8000353d>
800023bc:	00f42623          	sw	a5,12(s0)
	list->tail = (sys_dnode_t *)list;
800023c0:	00f42823          	sw	a5,16(s0)
	_kernel.irq_stack = _interrupt_stack + CONFIG_ISR_STACK_SIZE;
800023c4:	000017b7          	lui	a5,0x1
800023c8:	80078713          	addi	a4,a5,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
800023cc:	800047b7          	lui	a5,0x80004
800023d0:	c6078793          	addi	a5,a5,-928 # 80003c60 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003c61>
800023d4:	00e787b3          	add	a5,a5,a4
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
800023d8:	00000513          	li	a0,0
800023dc:	00f42223          	sw	a5,4(s0)
800023e0:	d9dff0ef          	jal	ra,8000217c <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
800023e4:	00048513          	mv	a0,s1
800023e8:	d95ff0ef          	jal	ra,8000217c <_sys_device_do_config_level>
800023ec:	00800413          	li	s0,8
800023f0:	30043473          	csrrc	s0,mstatus,s0

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
800023f4:	30c000ef          	jal	ra,80002700 <_update_time_slice_before_swap>
#endif

	return __swap(key);
800023f8:	00847513          	andi	a0,s0,8
800023fc:	ffffe317          	auipc	t1,0xffffe
80002400:	e70300e7          	jalr	-400(t1) # 8000026c <__swap>

80002404 <_add_thread_to_ready_q>:
	__ASSERT(duration_in_ms >= 0, "");
	__ASSERT((prio >= 0) && (prio < CONFIG_NUM_PREEMPT_PRIORITIES), "");

	_time_slice_duration = duration_in_ms;
	_time_slice_elapsed = 0;
	_time_slice_prio_ceiling = prio;
80002404:	00a50783          	lb	a5,10(a0)
80002408:	80003637          	lui	a2,0x80003
8000240c:	53060593          	addi	a1,a2,1328 # 80003530 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003531>
80002410:	01078813          	addi	a6,a5,16
80002414:	40585713          	srai	a4,a6,0x5
80002418:	00470713          	addi	a4,a4,4
8000241c:	00271713          	slli	a4,a4,0x2
80002420:	00e58733          	add	a4,a1,a4
80002424:	00100693          	li	a3,1
80002428:	010696b3          	sll	a3,a3,a6
8000242c:	00872803          	lw	a6,8(a4)
80002430:	01278793          	addi	a5,a5,18
80002434:	00379793          	slli	a5,a5,0x3
80002438:	0106e6b3          	or	a3,a3,a6
8000243c:	00d72423          	sw	a3,8(a4)
80002440:	00c78713          	addi	a4,a5,12
80002444:	00e58733          	add	a4,a1,a4
80002448:	00e52023          	sw	a4,0(a0)
8000244c:	00f587b3          	add	a5,a1,a5
80002450:	0107a703          	lw	a4,16(a5)
80002454:	53060613          	addi	a2,a2,1328
80002458:	00e52223          	sw	a4,4(a0)
8000245c:	0107a703          	lw	a4,16(a5)
80002460:	00a72023          	sw	a0,0(a4)
80002464:	00a7a823          	sw	a0,16(a5)
80002468:	0145a783          	lw	a5,20(a1)
8000246c:	00a50683          	lb	a3,10(a0)
80002470:	00a78703          	lb	a4,10(a5)
80002474:	00e6c463          	blt	a3,a4,8000247c <_add_thread_to_ready_q+0x78>
80002478:	00078513          	mv	a0,a5
8000247c:	00a62a23          	sw	a0,20(a2)
80002480:	00008067          	ret

80002484 <_remove_thread_from_ready_q>:
80002484:	ff010113          	addi	sp,sp,-16
80002488:	00812423          	sw	s0,8(sp)
8000248c:	00112623          	sw	ra,12(sp)
80002490:	00452703          	lw	a4,4(a0)
80002494:	00052683          	lw	a3,0(a0)
80002498:	00a50783          	lb	a5,10(a0)
8000249c:	80003437          	lui	s0,0x80003
800024a0:	00d72023          	sw	a3,0(a4)
800024a4:	00052683          	lw	a3,0(a0)
800024a8:	01278793          	addi	a5,a5,18
800024ac:	00379793          	slli	a5,a5,0x3
800024b0:	00e6a223          	sw	a4,4(a3)
800024b4:	53040713          	addi	a4,s0,1328 # 80003530 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003531>
800024b8:	00c78693          	addi	a3,a5,12
800024bc:	00f707b3          	add	a5,a4,a5
800024c0:	00c7a783          	lw	a5,12(a5)
800024c4:	00d706b3          	add	a3,a4,a3
800024c8:	53040413          	addi	s0,s0,1328
800024cc:	02d79a63          	bne	a5,a3,80002500 <_remove_thread_from_ready_q+0x7c>
800024d0:	00a50703          	lb	a4,10(a0)
800024d4:	01070693          	addi	a3,a4,16
800024d8:	4056d793          	srai	a5,a3,0x5
800024dc:	00478793          	addi	a5,a5,4
800024e0:	00279793          	slli	a5,a5,0x2
800024e4:	00f407b3          	add	a5,s0,a5
800024e8:	00100713          	li	a4,1
800024ec:	00d71733          	sll	a4,a4,a3
800024f0:	0087a683          	lw	a3,8(a5)
800024f4:	fff74713          	not	a4,a4
800024f8:	00d77733          	and	a4,a4,a3
800024fc:	00e7a423          	sw	a4,8(a5)
80002500:	01442783          	lw	a5,20(s0)
80002504:	00f51e63          	bne	a0,a5,80002520 <_remove_thread_from_ready_q+0x9c>
80002508:	01842503          	lw	a0,24(s0)
8000250c:	f9dfd0ef          	jal	ra,800004a8 <__ffssi2>
80002510:	00150513          	addi	a0,a0,1
80002514:	00351513          	slli	a0,a0,0x3
80002518:	00a40533          	add	a0,s0,a0
8000251c:	00c52783          	lw	a5,12(a0)
80002520:	00c12083          	lw	ra,12(sp)
80002524:	00f42a23          	sw	a5,20(s0)
80002528:	00812403          	lw	s0,8(sp)
8000252c:	01010113          	addi	sp,sp,16
80002530:	00008067          	ret

80002534 <__must_switch_threads>:
80002534:	ff010113          	addi	sp,sp,-16
80002538:	00812423          	sw	s0,8(sp)
8000253c:	80003437          	lui	s0,0x80003
80002540:	53040413          	addi	s0,s0,1328 # 80003530 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003531>
80002544:	01842503          	lw	a0,24(s0)
80002548:	00112623          	sw	ra,12(sp)
8000254c:	f5dfd0ef          	jal	ra,800004a8 <__ffssi2>
80002550:	00842783          	lw	a5,8(s0)
80002554:	00c12083          	lw	ra,12(sp)
80002558:	fef50513          	addi	a0,a0,-17
8000255c:	00a78783          	lb	a5,10(a5)
80002560:	00812403          	lw	s0,8(sp)
80002564:	01010113          	addi	sp,sp,16
80002568:	00f52533          	slt	a0,a0,a5
8000256c:	00008067          	ret

80002570 <_reschedule_threads>:
80002570:	800037b7          	lui	a5,0x80003
80002574:	5387a783          	lw	a5,1336(a5) # 80003538 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003539>
80002578:	ff010113          	addi	sp,sp,-16
8000257c:	00812423          	sw	s0,8(sp)
80002580:	00a7d703          	lhu	a4,10(a5)
80002584:	00112623          	sw	ra,12(sp)
80002588:	07f00793          	li	a5,127
8000258c:	00050413          	mv	s0,a0
80002590:	00e7e663          	bltu	a5,a4,8000259c <_reschedule_threads+0x2c>
80002594:	fa1ff0ef          	jal	ra,80002534 <__must_switch_threads>
80002598:	00051e63          	bnez	a0,800025b4 <_reschedule_threads+0x44>
8000259c:	00847413          	andi	s0,s0,8
800025a0:	30042473          	csrrs	s0,mstatus,s0
800025a4:	00c12083          	lw	ra,12(sp)
800025a8:	00812403          	lw	s0,8(sp)
800025ac:	01010113          	addi	sp,sp,16
800025b0:	00008067          	ret
800025b4:	00040513          	mv	a0,s0
800025b8:	00c12083          	lw	ra,12(sp)
800025bc:	00812403          	lw	s0,8(sp)
800025c0:	800037b7          	lui	a5,0x80003
800025c4:	01010113          	addi	sp,sp,16
800025c8:	6407aa23          	sw	zero,1620(a5) # 80003654 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003655>
800025cc:	ffffe317          	auipc	t1,0xffffe
800025d0:	ca030067          	jr	-864(t1) # 8000026c <__swap>

800025d4 <k_sched_unlock>:
800025d4:	00800513          	li	a0,8
800025d8:	30053573          	csrrc	a0,mstatus,a0
800025dc:	800037b7          	lui	a5,0x80003
800025e0:	5387a703          	lw	a4,1336(a5) # 80003538 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003539>
800025e4:	00857513          	andi	a0,a0,8
800025e8:	00b74783          	lbu	a5,11(a4)
800025ec:	00178793          	addi	a5,a5,1
800025f0:	00f705a3          	sb	a5,11(a4)
800025f4:	f7dff06f          	j	80002570 <_reschedule_threads>

800025f8 <_move_thread_to_end_of_prio_q>:
800025f8:	ff010113          	addi	sp,sp,-16
800025fc:	00812423          	sw	s0,8(sp)
80002600:	00112623          	sw	ra,12(sp)
80002604:	00a50783          	lb	a5,10(a0)
80002608:	80003437          	lui	s0,0x80003
8000260c:	53040713          	addi	a4,s0,1328 # 80003530 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003531>
80002610:	01278793          	addi	a5,a5,18
80002614:	00379793          	slli	a5,a5,0x3
80002618:	00c78693          	addi	a3,a5,12
8000261c:	00d70733          	add	a4,a4,a3
80002620:	00472683          	lw	a3,4(a4)
80002624:	04d50e63          	beq	a0,a3,80002680 <_move_thread_to_end_of_prio_q+0x88>
80002628:	00052603          	lw	a2,0(a0)
8000262c:	00452683          	lw	a3,4(a0)
80002630:	53040413          	addi	s0,s0,1328
80002634:	00f407b3          	add	a5,s0,a5
80002638:	00c6a023          	sw	a2,0(a3)
8000263c:	00052603          	lw	a2,0(a0)
80002640:	00d62223          	sw	a3,4(a2)
80002644:	00e52023          	sw	a4,0(a0)
80002648:	0107a703          	lw	a4,16(a5)
8000264c:	00e52223          	sw	a4,4(a0)
80002650:	0107a703          	lw	a4,16(a5)
80002654:	00a72023          	sw	a0,0(a4)
80002658:	00a7a823          	sw	a0,16(a5)
8000265c:	01442783          	lw	a5,20(s0)
80002660:	00f51e63          	bne	a0,a5,8000267c <_move_thread_to_end_of_prio_q+0x84>
80002664:	01842503          	lw	a0,24(s0)
80002668:	e41fd0ef          	jal	ra,800004a8 <__ffssi2>
8000266c:	00150513          	addi	a0,a0,1
80002670:	00351513          	slli	a0,a0,0x3
80002674:	00a40533          	add	a0,s0,a0
80002678:	00c52783          	lw	a5,12(a0)
8000267c:	00f42a23          	sw	a5,20(s0)
80002680:	00c12083          	lw	ra,12(sp)
80002684:	00812403          	lw	s0,8(sp)
80002688:	01010113          	addi	sp,sp,16
8000268c:	00008067          	ret

80002690 <k_current_get>:
80002690:	800037b7          	lui	a5,0x80003
80002694:	5387a503          	lw	a0,1336(a5) # 80003538 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003539>
80002698:	00008067          	ret

8000269c <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
8000269c:	800037b7          	lui	a5,0x80003
800026a0:	4507a783          	lw	a5,1104(a5) # 80003450 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003451>
800026a4:	04f05a63          	blez	a5,800026f8 <_is_thread_time_slicing+0x5c>
	return thread == _idle_thread;
800026a8:	800037b7          	lui	a5,0x80003
800026ac:	3e47a703          	lw	a4,996(a5) # 800033e4 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x800033e5>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
		return 0;
800026b0:	00000793          	li	a5,0
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
800026b4:	02e50e63          	beq	a0,a4,800026f0 <_is_thread_time_slicing+0x54>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
800026b8:	800037b7          	lui	a5,0x80003
800026bc:	4547a683          	lw	a3,1108(a5) # 80003454 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003455>
800026c0:	00a50703          	lb	a4,10(a0)
		return 0;
800026c4:	00000793          	li	a5,0
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
800026c8:	02d74463          	blt	a4,a3,800026f0 <_is_thread_time_slicing+0x54>
 * @return 1 if multiple nodes, 0 otherwise
 */

static inline int sys_dlist_has_multiple_nodes(sys_dlist_t *list)
{
	return list->head != list->tail;
800026cc:	01270713          	addi	a4,a4,18
800026d0:	00371793          	slli	a5,a4,0x3
800026d4:	80003737          	lui	a4,0x80003
800026d8:	53070713          	addi	a4,a4,1328 # 80003530 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003531>
800026dc:	00f70733          	add	a4,a4,a5
800026e0:	00c72783          	lw	a5,12(a4)
800026e4:	01072503          	lw	a0,16(a4)
800026e8:	40a787b3          	sub	a5,a5,a0
800026ec:	00f037b3          	snez	a5,a5

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
}
800026f0:	00078513          	mv	a0,a5
800026f4:	00008067          	ret
		return 0;
800026f8:	00000793          	li	a5,0
800026fc:	ff5ff06f          	j	800026f0 <_is_thread_time_slicing+0x54>

80002700 <_update_time_slice_before_swap>:
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
80002700:	800037b7          	lui	a5,0x80003
80002704:	6407aa23          	sw	zero,1620(a5) # 80003654 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003655>
80002708:	00008067          	ret

8000270c <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
8000270c:	fd010113          	addi	sp,sp,-48
80002710:	01412c23          	sw	s4,24(sp)
80002714:	02112623          	sw	ra,44(sp)
80002718:	02812423          	sw	s0,40(sp)
8000271c:	02912223          	sw	s1,36(sp)
80002720:	03212023          	sw	s2,32(sp)
80002724:	01312e23          	sw	s3,28(sp)
80002728:	01512a23          	sw	s5,20(sp)
8000272c:	01612823          	sw	s6,16(sp)
80002730:	00050a13          	mv	s4,a0
80002734:	00800693          	li	a3,8
80002738:	3006b7f3          	csrrc	a5,mstatus,a3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
8000273c:	80003637          	lui	a2,0x80003
80002740:	65862503          	lw	a0,1624(a2) # 80003658 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003659>
80002744:	65c62583          	lw	a1,1628(a2)
80002748:	41fa5713          	srai	a4,s4,0x1f
8000274c:	00aa0833          	add	a6,s4,a0
80002750:	014838b3          	sltu	a7,a6,s4
80002754:	00b70733          	add	a4,a4,a1
80002758:	00e885b3          	add	a1,a7,a4
8000275c:	65062c23          	sw	a6,1624(a2)
80002760:	64b62e23          	sw	a1,1628(a2)
	key = (mstatus & SOC_MSTATUS_IEN);
80002764:	00d7f7b3          	and	a5,a5,a3
	__asm__ volatile ("csrrs %0, mstatus, %1"
80002768:	3007a7f3          	csrrs	a5,mstatus,a5
	list->head = (sys_dnode_t *)list;
8000276c:	00d10633          	add	a2,sp,a3
80002770:	00c12423          	sw	a2,8(sp)
	list->tail = (sys_dnode_t *)list;
80002774:	00c12623          	sw	a2,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80002778:	3006b773          	csrrc	a4,mstatus,a3
	return list->head == list;
8000277c:	800034b7          	lui	s1,0x80003
80002780:	53048793          	addi	a5,s1,1328 # 80003530 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003531>
80002784:	00c7a783          	lw	a5,12(a5)
80002788:	800035b7          	lui	a1,0x80003
8000278c:	53c58593          	addi	a1,a1,1340 # 8000353c <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x8000353d>
	key = (mstatus & SOC_MSTATUS_IEN);
80002790:	00d77733          	and	a4,a4,a3
80002794:	53048493          	addi	s1,s1,1328
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
80002798:	00b78463          	beq	a5,a1,800027a0 <_nano_sys_clock_tick_announce+0x94>
	if (!head) {
8000279c:	06079e63          	bnez	a5,80002818 <_nano_sys_clock_tick_announce+0x10c>
	__asm__ volatile ("csrrs %0, mstatus, %1"
800027a0:	30072773          	csrrs	a4,mstatus,a4
	if (!_is_thread_time_slicing(_current)) {
800027a4:	0084a503          	lw	a0,8(s1)
800027a8:	ef5ff0ef          	jal	ra,8000269c <_is_thread_time_slicing>
800027ac:	04050263          	beqz	a0,800027f0 <_nano_sys_clock_tick_announce+0xe4>
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
	return (MSEC_PER_SEC * (u64_t)ticks) / sys_clock_ticks_per_sec;
#else
	return (u64_t)ticks * _ms_per_tick;
800027b0:	00a00713          	li	a4,10
800027b4:	02ea0733          	mul	a4,s4,a4
	_time_slice_elapsed += __ticks_to_ms(ticks);
800027b8:	800037b7          	lui	a5,0x80003
800027bc:	6547aa03          	lw	s4,1620(a5) # 80003654 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003655>
800027c0:	00ea0a33          	add	s4,s4,a4
	if (_time_slice_elapsed >= _time_slice_duration) {
800027c4:	80003737          	lui	a4,0x80003
800027c8:	45072703          	lw	a4,1104(a4) # 80003450 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003451>
	_time_slice_elapsed += __ticks_to_ms(ticks);
800027cc:	6547aa23          	sw	s4,1620(a5)
	if (_time_slice_elapsed >= _time_slice_duration) {
800027d0:	02ea4063          	blt	s4,a4,800027f0 <_nano_sys_clock_tick_announce+0xe4>
		_time_slice_elapsed = 0;
800027d4:	6407aa23          	sw	zero,1620(a5)
	__asm__ volatile ("csrrc %0, mstatus, %1"
800027d8:	00800413          	li	s0,8
800027dc:	30043473          	csrrc	s0,mstatus,s0
		_move_thread_to_end_of_prio_q(_current);
800027e0:	0084a503          	lw	a0,8(s1)
	key = (mstatus & SOC_MSTATUS_IEN);
800027e4:	00847413          	andi	s0,s0,8
800027e8:	e11ff0ef          	jal	ra,800025f8 <_move_thread_to_end_of_prio_q>
	__asm__ volatile ("csrrs %0, mstatus, %1"
800027ec:	30042473          	csrrs	s0,mstatus,s0
		_set_time(next_to);
	}
#endif
	// _t_debug
	K_DEBUG("returning \n");
}
800027f0:	02c12083          	lw	ra,44(sp)
800027f4:	02812403          	lw	s0,40(sp)
800027f8:	02412483          	lw	s1,36(sp)
800027fc:	02012903          	lw	s2,32(sp)
80002800:	01c12983          	lw	s3,28(sp)
80002804:	01812a03          	lw	s4,24(sp)
80002808:	01412a83          	lw	s5,20(sp)
8000280c:	01012b03          	lw	s6,16(sp)
80002810:	03010113          	addi	sp,sp,48
80002814:	00008067          	ret
	head->delta_ticks_from_prev -= ticks;
80002818:	0107a503          	lw	a0,16(a5)
	_handling_timeouts = 1;
8000281c:	800039b7          	lui	s3,0x80003
		timeout->delta_ticks_from_prev = _EXPIRED;
80002820:	ffe00813          	li	a6,-2
	head->delta_ticks_from_prev -= ticks;
80002824:	41450533          	sub	a0,a0,s4
80002828:	00a7a823          	sw	a0,16(a5)
	_handling_timeouts = 1;
8000282c:	00100513          	li	a0,1
80002830:	64a9a823          	sw	a0,1616(s3) # 80003650 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003651>
	while (timeout && timeout->delta_ticks_from_prev == 0) {
80002834:	0107a503          	lw	a0,16(a5)
80002838:	04051663          	bnez	a0,80002884 <_nano_sys_clock_tick_announce+0x178>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
8000283c:	0007a883          	lw	a7,0(a5)
80002840:	0047a503          	lw	a0,4(a5)
80002844:	01152023          	sw	a7,0(a0)
	node->next->prev = node->prev;
80002848:	0007a883          	lw	a7,0(a5)
8000284c:	00a8a223          	sw	a0,4(a7)
	node->next = list->head;
80002850:	00812503          	lw	a0,8(sp)
	node->prev = list;
80002854:	00c7a223          	sw	a2,4(a5)
	node->next = list->head;
80002858:	00a7a023          	sw	a0,0(a5)
	list->head->prev = node;
8000285c:	00812503          	lw	a0,8(sp)
	list->head = node;
80002860:	00f12423          	sw	a5,8(sp)
	list->head->prev = node;
80002864:	00f52223          	sw	a5,4(a0)
		timeout->delta_ticks_from_prev = _EXPIRED;
80002868:	0107a823          	sw	a6,16(a5)
8000286c:	30072773          	csrrs	a4,mstatus,a4
	__asm__ volatile ("csrrc %0, mstatus, %1"
80002870:	3006b773          	csrrc	a4,mstatus,a3
	return list->head == list;
80002874:	00c4a783          	lw	a5,12(s1)
	key = (mstatus & SOC_MSTATUS_IEN);
80002878:	00877713          	andi	a4,a4,8
	return sys_dlist_is_empty(list) ? NULL : list->head;
8000287c:	00b78463          	beq	a5,a1,80002884 <_nano_sys_clock_tick_announce+0x178>
	while (timeout && timeout->delta_ticks_from_prev == 0) {
80002880:	fa079ae3          	bnez	a5,80002834 <_nano_sys_clock_tick_announce+0x128>
	__asm__ volatile ("csrrs %0, mstatus, %1"
80002884:	30072773          	csrrs	a4,mstatus,a4
	return list->head == list;
80002888:	00812783          	lw	a5,8(sp)
	return sys_dlist_is_empty(list) ? NULL : list->head;
8000288c:	00c79663          	bne	a5,a2,80002898 <_nano_sys_clock_tick_announce+0x18c>
	_handling_timeouts = 0;
80002890:	6409a823          	sw	zero,1616(s3)
80002894:	f11ff06f          	j	800027a4 <_nano_sys_clock_tick_announce+0x98>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
80002898:	fe078ce3          	beqz	a5,80002890 <_nano_sys_clock_tick_announce+0x184>
	return (node == list->tail) ? NULL : node->next;
8000289c:	00c12703          	lw	a4,12(sp)
800028a0:	00000413          	li	s0,0
800028a4:	00e78463          	beq	a5,a4,800028ac <_nano_sys_clock_tick_announce+0x1a0>
800028a8:	0007a403          	lw	s0,0(a5)
	__asm__ volatile ("csrrc %0, mstatus, %1"
800028ac:	00800b13          	li	s6,8
static inline void _handle_one_expired_timeout(struct _timeout *timeout)
{
	struct k_thread *thread = timeout->thread;
	unsigned int key = irq_lock();

	timeout->delta_ticks_from_prev = _INACTIVE;
800028b0:	fff00a93          	li	s5,-1
	node->prev->next = node->next;
800028b4:	0007a683          	lw	a3,0(a5)
800028b8:	0047a703          	lw	a4,4(a5)
800028bc:	00d72023          	sw	a3,0(a4)
	node->next->prev = node->prev;
800028c0:	0007a683          	lw	a3,0(a5)
800028c4:	00e6a223          	sw	a4,4(a3)
	struct k_thread *thread = timeout->thread;
800028c8:	0087a503          	lw	a0,8(a5)
800028cc:	300b3973          	csrrc	s2,mstatus,s6
	timeout->delta_ticks_from_prev = _INACTIVE;
800028d0:	0157a823          	sw	s5,16(a5)
	key = (mstatus & SOC_MSTATUS_IEN);
800028d4:	00897913          	andi	s2,s2,8

	K_DEBUG("timeout %p\n", timeout);
	if (thread) {
800028d8:	06050863          	beqz	a0,80002948 <_nano_sys_clock_tick_announce+0x23c>
	if (timeout_obj->wait_q) {
800028dc:	00c7a783          	lw	a5,12(a5)
800028e0:	02078463          	beqz	a5,80002908 <_nano_sys_clock_tick_announce+0x1fc>
	node->prev->next = node->next;
800028e4:	00452783          	lw	a5,4(a0)
800028e8:	00052703          	lw	a4,0(a0)
800028ec:	00e7a023          	sw	a4,0(a5)
	node->next->prev = node->prev;
800028f0:	00052703          	lw	a4,0(a0)
800028f4:	00f72223          	sw	a5,4(a4)
	thread->base.thread_state &= ~_THREAD_PENDING;
800028f8:	00954783          	lbu	a5,9(a0)
		thread->base.timeout.wait_q = NULL;
800028fc:	00052e23          	sw	zero,28(a0)
80002900:	ffd7f793          	andi	a5,a5,-3
80002904:	00f504a3          	sb	a5,9(a0)
	thread->base.thread_state &= ~_THREAD_PRESTART;
80002908:	00954783          	lbu	a5,9(a0)
8000290c:	ffb7f713          	andi	a4,a5,-5
80002910:	00e504a3          	sb	a4,9(a0)
	return !(_is_thread_prevented_from_running(thread) ||
80002914:	01b7f793          	andi	a5,a5,27
80002918:	00079663          	bnez	a5,80002924 <_nano_sys_clock_tick_announce+0x218>
8000291c:	02052783          	lw	a5,32(a0)
80002920:	05578063          	beq	a5,s5,80002960 <_nano_sys_clock_tick_announce+0x254>
	__asm__ volatile ("csrrs %0, mstatus, %1"
80002924:	30092973          	csrrs	s2,mstatus,s2
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
80002928:	f60404e3          	beqz	s0,80002890 <_nano_sys_clock_tick_announce+0x184>
	return (node == list->tail) ? NULL : node->next;
8000292c:	00c12783          	lw	a5,12(sp)
80002930:	00000713          	li	a4,0
80002934:	00878463          	beq	a5,s0,8000293c <_nano_sys_clock_tick_announce+0x230>
80002938:	00042703          	lw	a4,0(s0)
8000293c:	00040793          	mv	a5,s0
80002940:	00070413          	mv	s0,a4
80002944:	f71ff06f          	j	800028b4 <_nano_sys_clock_tick_announce+0x1a8>
80002948:	30092973          	csrrs	s2,mstatus,s2
		_unpend_thread_timing_out(thread, timeout);
		_ready_thread(thread);
		irq_unlock(key);
	} else {
		irq_unlock(key);
		if (timeout->func) {
8000294c:	0147a703          	lw	a4,20(a5)
80002950:	fc070ce3          	beqz	a4,80002928 <_nano_sys_clock_tick_announce+0x21c>
			timeout->func(timeout);
80002954:	00078513          	mv	a0,a5
80002958:	000700e7          	jalr	a4
8000295c:	fcdff06f          	j	80002928 <_nano_sys_clock_tick_announce+0x21c>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
80002960:	aa5ff0ef          	jal	ra,80002404 <_add_thread_to_ready_q>
80002964:	fc1ff06f          	j	80002924 <_nano_sys_clock_tick_announce+0x218>

80002968 <_is_thread_ready>:
{
	unsigned int  key = irq_lock();

	_k_thread_single_resume(thread);

	_reschedule_threads(key);
80002968:	00954783          	lbu	a5,9(a0)
8000296c:	01f7f793          	andi	a5,a5,31
80002970:	00079a63          	bnez	a5,80002984 <_is_thread_ready+0x1c>
80002974:	02052503          	lw	a0,32(a0)
80002978:	00150513          	addi	a0,a0,1
8000297c:	00153513          	seqz	a0,a0
80002980:	00008067          	ret
80002984:	00000513          	li	a0,0
80002988:	00008067          	ret

8000298c <start_thread>:
8000298c:	ff010113          	addi	sp,sp,-16
80002990:	00812423          	sw	s0,8(sp)
80002994:	00912223          	sw	s1,4(sp)
80002998:	00112623          	sw	ra,12(sp)
8000299c:	00050493          	mv	s1,a0
800029a0:	00800413          	li	s0,8
800029a4:	30043473          	csrrc	s0,mstatus,s0
800029a8:	00954783          	lbu	a5,9(a0)
800029ac:	00847413          	andi	s0,s0,8
800029b0:	ffb7f793          	andi	a5,a5,-5
800029b4:	00f504a3          	sb	a5,9(a0)
800029b8:	fb1ff0ef          	jal	ra,80002968 <_is_thread_ready>
800029bc:	00051e63          	bnez	a0,800029d8 <start_thread+0x4c>
800029c0:	30042473          	csrrs	s0,mstatus,s0
800029c4:	00c12083          	lw	ra,12(sp)
800029c8:	00812403          	lw	s0,8(sp)
800029cc:	00412483          	lw	s1,4(sp)
800029d0:	01010113          	addi	sp,sp,16
800029d4:	00008067          	ret
800029d8:	00048513          	mv	a0,s1
800029dc:	a29ff0ef          	jal	ra,80002404 <_add_thread_to_ready_q>
800029e0:	800037b7          	lui	a5,0x80003
800029e4:	5387a783          	lw	a5,1336(a5) # 80003538 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003539>
800029e8:	00a7d703          	lhu	a4,10(a5)
800029ec:	07f00793          	li	a5,127
800029f0:	fce7e8e3          	bltu	a5,a4,800029c0 <start_thread+0x34>
800029f4:	b41ff0ef          	jal	ra,80002534 <__must_switch_threads>
800029f8:	fc0504e3          	beqz	a0,800029c0 <start_thread+0x34>
800029fc:	d05ff0ef          	jal	ra,80002700 <_update_time_slice_before_swap>
80002a00:	00040513          	mv	a0,s0
80002a04:	00c12083          	lw	ra,12(sp)
80002a08:	00812403          	lw	s0,8(sp)
80002a0c:	00412483          	lw	s1,4(sp)
80002a10:	01010113          	addi	sp,sp,16
80002a14:	ffffe317          	auipc	t1,0xffffe
80002a18:	85830067          	jr	-1960(t1) # 8000026c <__swap>

80002a1c <_abort_timeout>:
80002a1c:	01052783          	lw	a5,16(a0)
80002a20:	fff00713          	li	a4,-1
80002a24:	04e78263          	beq	a5,a4,80002a68 <_abort_timeout+0x4c>
80002a28:	80003737          	lui	a4,0x80003
80002a2c:	54072703          	lw	a4,1344(a4) # 80003540 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003541>
80002a30:	00e50a63          	beq	a0,a4,80002a44 <_abort_timeout+0x28>
80002a34:	00052683          	lw	a3,0(a0)
80002a38:	0106a703          	lw	a4,16(a3)
80002a3c:	00f707b3          	add	a5,a4,a5
80002a40:	00f6a823          	sw	a5,16(a3)
80002a44:	00452783          	lw	a5,4(a0)
80002a48:	00052703          	lw	a4,0(a0)
80002a4c:	00e7a023          	sw	a4,0(a5)
80002a50:	00052703          	lw	a4,0(a0)
80002a54:	00f72223          	sw	a5,4(a4)
80002a58:	fff00793          	li	a5,-1
80002a5c:	00f52823          	sw	a5,16(a0)
80002a60:	00000513          	li	a0,0
80002a64:	00008067          	ret
80002a68:	00078513          	mv	a0,a5
80002a6c:	00008067          	ret

80002a70 <schedule_new_thread.part.14>:
80002a70:	00800713          	li	a4,8
80002a74:	30073773          	csrrc	a4,mstatus,a4
80002a78:	00a00793          	li	a5,10
80002a7c:	00958593          	addi	a1,a1,9
80002a80:	02f5d5b3          	divu	a1,a1,a5
80002a84:	800036b7          	lui	a3,0x80003
80002a88:	53068793          	addi	a5,a3,1328 # 80003530 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003531>
80002a8c:	00c7a783          	lw	a5,12(a5)
80002a90:	800038b7          	lui	a7,0x80003
80002a94:	00a52c23          	sw	a0,24(a0)
80002a98:	00052e23          	sw	zero,28(a0)
80002a9c:	53c88893          	addi	a7,a7,1340 # 8000353c <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x8000353d>
80002aa0:	00877713          	andi	a4,a4,8
80002aa4:	01050813          	addi	a6,a0,16
80002aa8:	53068693          	addi	a3,a3,1328
80002aac:	00158593          	addi	a1,a1,1
80002ab0:	02b52023          	sw	a1,32(a0)
80002ab4:	03179063          	bne	a5,a7,80002ad4 <schedule_new_thread.part.14+0x64>
80002ab8:	01152823          	sw	a7,16(a0)
80002abc:	0106a783          	lw	a5,16(a3)
80002ac0:	00f52a23          	sw	a5,20(a0)
80002ac4:	0107a023          	sw	a6,0(a5)
80002ac8:	0106a823          	sw	a6,16(a3)
80002acc:	30072773          	csrrs	a4,mstatus,a4
80002ad0:	00008067          	ret
80002ad4:	fe0782e3          	beqz	a5,80002ab8 <schedule_new_thread.part.14+0x48>
80002ad8:	0106a303          	lw	t1,16(a3)
80002adc:	02052603          	lw	a2,32(a0)
80002ae0:	0107a583          	lw	a1,16(a5)
80002ae4:	02c5c463          	blt	a1,a2,80002b0c <schedule_new_thread.part.14+0x9c>
80002ae8:	0047a683          	lw	a3,4(a5)
80002aec:	40c58633          	sub	a2,a1,a2
80002af0:	00c7a823          	sw	a2,16(a5)
80002af4:	00d52a23          	sw	a3,20(a0)
80002af8:	00f52823          	sw	a5,16(a0)
80002afc:	0047a683          	lw	a3,4(a5)
80002b00:	0106a023          	sw	a6,0(a3)
80002b04:	0107a223          	sw	a6,4(a5)
80002b08:	fc5ff06f          	j	80002acc <schedule_new_thread.part.14+0x5c>
80002b0c:	40b60633          	sub	a2,a2,a1
80002b10:	02c52023          	sw	a2,32(a0)
80002b14:	fa6782e3          	beq	a5,t1,80002ab8 <schedule_new_thread.part.14+0x48>
80002b18:	0007a783          	lw	a5,0(a5)
80002b1c:	fc0790e3          	bnez	a5,80002adc <schedule_new_thread.part.14+0x6c>
80002b20:	f99ff06f          	j	80002ab8 <schedule_new_thread.part.14+0x48>

80002b24 <k_is_in_isr>:
80002b24:	800037b7          	lui	a5,0x80003
80002b28:	5307a503          	lw	a0,1328(a5) # 80003530 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003531>
80002b2c:	00a03533          	snez	a0,a0
80002b30:	00008067          	ret

80002b34 <_is_thread_essential>:
80002b34:	800037b7          	lui	a5,0x80003
80002b38:	5387a783          	lw	a5,1336(a5) # 80003538 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003539>
80002b3c:	0087c503          	lbu	a0,8(a5)
80002b40:	00157513          	andi	a0,a0,1
80002b44:	00008067          	ret

80002b48 <_thread_entry>:
80002b48:	ff010113          	addi	sp,sp,-16
80002b4c:	00112623          	sw	ra,12(sp)
80002b50:	00050793          	mv	a5,a0
80002b54:	00058513          	mv	a0,a1
80002b58:	00060593          	mv	a1,a2
80002b5c:	00068613          	mv	a2,a3
80002b60:	000780e7          	jalr	a5
80002b64:	fd1ff0ef          	jal	ra,80002b34 <_is_thread_essential>
80002b68:	02050663          	beqz	a0,80002b94 <_thread_entry+0x4c>
80002b6c:	800035b7          	lui	a1,0x80003
80002b70:	80003537          	lui	a0,0x80003
80002b74:	35458593          	addi	a1,a1,852 # 80003354 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003355>
80002b78:	0c100613          	li	a2,193
80002b7c:	38c50513          	addi	a0,a0,908 # 8000338c <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x8000338d>
80002b80:	9bcff0ef          	jal	ra,80001d3c <printk>
80002b84:	800035b7          	lui	a1,0x80003
80002b88:	21458593          	addi	a1,a1,532 # 80003214 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003215>
80002b8c:	00100513          	li	a0,1
80002b90:	aecff0ef          	jal	ra,80001e7c <_NanoFatalErrorHandler>
80002b94:	800037b7          	lui	a5,0x80003
80002b98:	5387a503          	lw	a0,1336(a5) # 80003538 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003539>
80002b9c:	198000ef          	jal	ra,80002d34 <k_thread_abort>

80002ba0 <_k_thread_single_abort>:
}

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
80002ba0:	06052783          	lw	a5,96(a0)
{
80002ba4:	ff010113          	addi	sp,sp,-16
80002ba8:	00812423          	sw	s0,8(sp)
80002bac:	00112623          	sw	ra,12(sp)
80002bb0:	00050413          	mv	s0,a0
	if (thread->fn_abort != NULL) {
80002bb4:	00078463          	beqz	a5,80002bbc <_k_thread_single_abort+0x1c>
		thread->fn_abort();
80002bb8:	000780e7          	jalr	a5
	}

	if (_is_thread_ready(thread)) {
80002bbc:	00040513          	mv	a0,s0
80002bc0:	da9ff0ef          	jal	ra,80002968 <_is_thread_ready>
80002bc4:	02050463          	beqz	a0,80002bec <_k_thread_single_abort+0x4c>
		_remove_thread_from_ready_q(thread);
80002bc8:	00040513          	mv	a0,s0
80002bcc:	8b9ff0ef          	jal	ra,80002484 <_remove_thread_from_ready_q>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_dead(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_DEAD;
80002bd0:	00944783          	lbu	a5,9(s0)
80002bd4:	0087e793          	ori	a5,a5,8
80002bd8:	00f404a3          	sb	a5,9(s0)
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}
	_mark_thread_as_dead(thread);
}
80002bdc:	00c12083          	lw	ra,12(sp)
80002be0:	00812403          	lw	s0,8(sp)
80002be4:	01010113          	addi	sp,sp,16
80002be8:	00008067          	ret
		if (_is_thread_pending(thread)) {
80002bec:	00944783          	lbu	a5,9(s0)
80002bf0:	0027f793          	andi	a5,a5,2
80002bf4:	02078263          	beqz	a5,80002c18 <_k_thread_single_abort+0x78>
	node->prev->next = node->next;
80002bf8:	00442783          	lw	a5,4(s0)
80002bfc:	00042703          	lw	a4,0(s0)
80002c00:	00e7a023          	sw	a4,0(a5)
	node->next->prev = node->prev;
80002c04:	00042703          	lw	a4,0(s0)
80002c08:	00f72223          	sw	a5,4(a4)
	thread->base.thread_state &= ~_THREAD_PENDING;
80002c0c:	00944783          	lbu	a5,9(s0)
80002c10:	ffd7f793          	andi	a5,a5,-3
80002c14:	00f404a3          	sb	a5,9(s0)
		if (_is_thread_timeout_active(thread)) {
80002c18:	02042703          	lw	a4,32(s0)
80002c1c:	fff00793          	li	a5,-1
80002c20:	faf708e3          	beq	a4,a5,80002bd0 <_k_thread_single_abort+0x30>
}

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
80002c24:	01040513          	addi	a0,s0,16
80002c28:	df5ff0ef          	jal	ra,80002a1c <_abort_timeout>
80002c2c:	fa5ff06f          	j	80002bd0 <_k_thread_single_abort+0x30>

80002c30 <_init_static_threads>:

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
80002c30:	fd010113          	addi	sp,sp,-48
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
80002c34:	800037b7          	lui	a5,0x80003
{
80002c38:	01312e23          	sw	s3,28(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
80002c3c:	800039b7          	lui	s3,0x80003
{
80002c40:	02812423          	sw	s0,40(sp)
80002c44:	03212023          	sw	s2,32(sp)
80002c48:	02112623          	sw	ra,44(sp)
80002c4c:	02912223          	sw	s1,36(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
80002c50:	44078413          	addi	s0,a5,1088 # 80003440 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003441>
80002c54:	44078913          	addi	s2,a5,1088
80002c58:	44098993          	addi	s3,s3,1088 # 80003440 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003441>
80002c5c:	05346863          	bltu	s0,s3,80002cac <_init_static_threads+0x7c>
	--_current->base.sched_locked;
80002c60:	800037b7          	lui	a5,0x80003
80002c64:	5387a703          	lw	a4,1336(a5) # 80003538 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003539>
80002c68:	00b74783          	lbu	a5,11(a4)
80002c6c:	fff78793          	addi	a5,a5,-1
80002c70:	00f705a3          	sb	a5,11(a4)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80002c74:	00800493          	li	s1,8
80002c78:	3004b4f3          	csrrc	s1,mstatus,s1
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
80002c7c:	00090413          	mv	s0,s2
	key = (mstatus & SOC_MSTATUS_IEN);
80002c80:	0084f493          	andi	s1,s1,8
		if (thread_data->init_delay != K_FOREVER) {
80002c84:	fff00913          	li	s2,-1
	_FOREACH_STATIC_THREAD(thread_data) {
80002c88:	07346063          	bltu	s0,s3,80002ce8 <_init_static_threads+0xb8>
	__asm__ volatile ("csrrs %0, mstatus, %1"
80002c8c:	3004a4f3          	csrrs	s1,mstatus,s1
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
80002c90:	02c12083          	lw	ra,44(sp)
80002c94:	02812403          	lw	s0,40(sp)
80002c98:	02412483          	lw	s1,36(sp)
80002c9c:	02012903          	lw	s2,32(sp)
80002ca0:	01c12983          	lw	s3,28(sp)
80002ca4:	03010113          	addi	sp,sp,48
	k_sched_unlock();
80002ca8:	92dff06f          	j	800025d4 <k_sched_unlock>
		_new_thread(
80002cac:	02042303          	lw	t1,32(s0)
80002cb0:	01442783          	lw	a5,20(s0)
80002cb4:	01c42883          	lw	a7,28(s0)
80002cb8:	01842803          	lw	a6,24(s0)
80002cbc:	01042703          	lw	a4,16(s0)
80002cc0:	00c42683          	lw	a3,12(s0)
80002cc4:	00842603          	lw	a2,8(s0)
80002cc8:	00442583          	lw	a1,4(s0)
80002ccc:	00042503          	lw	a0,0(s0)
80002cd0:	00612023          	sw	t1,0(sp)
80002cd4:	bd8ff0ef          	jal	ra,800020ac <_new_thread>
		thread_data->init_thread->init_data = thread_data;
80002cd8:	00042783          	lw	a5,0(s0)
80002cdc:	0487ae23          	sw	s0,92(a5)
	_FOREACH_STATIC_THREAD(thread_data) {
80002ce0:	03040413          	addi	s0,s0,48
80002ce4:	f79ff06f          	j	80002c5c <_init_static_threads+0x2c>
		if (thread_data->init_delay != K_FOREVER) {
80002ce8:	02442583          	lw	a1,36(s0)
80002cec:	01258863          	beq	a1,s2,80002cfc <_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
80002cf0:	00042503          	lw	a0,0(s0)
	if (delay == 0) {
80002cf4:	00059863          	bnez	a1,80002d04 <_init_static_threads+0xd4>
		start_thread(thread);
80002cf8:	c95ff0ef          	jal	ra,8000298c <start_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
80002cfc:	03040413          	addi	s0,s0,48
80002d00:	f89ff06f          	j	80002c88 <_init_static_threads+0x58>
80002d04:	d6dff0ef          	jal	ra,80002a70 <schedule_new_thread.part.14>
80002d08:	ff5ff06f          	j	80002cfc <_init_static_threads+0xcc>

80002d0c <_init_thread_base>:
	t->delta_ticks_from_prev = _INACTIVE;
80002d0c:	fff00793          	li	a5,-1
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
80002d10:	00d50423          	sb	a3,8(a0)
	thread_base->thread_state = (u8_t)initial_state;
80002d14:	00c504a3          	sb	a2,9(a0)

	thread_base->prio = priority;
80002d18:	00b50523          	sb	a1,10(a0)

	thread_base->sched_locked = 0;
80002d1c:	000505a3          	sb	zero,11(a0)
80002d20:	02f52023          	sw	a5,32(a0)
	t->wait_q = NULL;
80002d24:	00052e23          	sw	zero,28(a0)
	t->thread = NULL;
80002d28:	00052c23          	sw	zero,24(a0)
	t->func = func;
80002d2c:	02052223          	sw	zero,36(a0)
80002d30:	00008067          	ret

80002d34 <k_thread_abort>:

extern void _k_thread_single_abort(struct k_thread *thread);

#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void k_thread_abort(k_tid_t thread)
{
80002d34:	ff010113          	addi	sp,sp,-16
80002d38:	00812423          	sw	s0,8(sp)
80002d3c:	00912223          	sw	s1,4(sp)
80002d40:	00112623          	sw	ra,12(sp)
80002d44:	00050493          	mv	s1,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80002d48:	00800413          	li	s0,8
80002d4c:	30043473          	csrrc	s0,mstatus,s0
	unsigned int key;

	key = irq_lock();

	_k_thread_single_abort(thread);
80002d50:	e51ff0ef          	jal	ra,80002ba0 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
80002d54:	800037b7          	lui	a5,0x80003
80002d58:	5387a783          	lw	a5,1336(a5) # 80003538 <CONFIG_OFFLOAD_WORKQUEUE_PRIORITY+0x80003539>
	key = (mstatus & SOC_MSTATUS_IEN);
80002d5c:	00847413          	andi	s0,s0,8
80002d60:	00f49a63          	bne	s1,a5,80002d74 <k_thread_abort+0x40>
	_update_time_slice_before_swap();
80002d64:	99dff0ef          	jal	ra,80002700 <_update_time_slice_before_swap>
	return __swap(key);
80002d68:	00040513          	mv	a0,s0
80002d6c:	ffffd317          	auipc	t1,0xffffd
80002d70:	500300e7          	jalr	1280(t1) # 8000026c <__swap>
		_Swap(key);
		CODE_UNREACHABLE;
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
80002d74:	00040513          	mv	a0,s0
}
80002d78:	00c12083          	lw	ra,12(sp)
80002d7c:	00812403          	lw	s0,8(sp)
80002d80:	00412483          	lw	s1,4(sp)
80002d84:	01010113          	addi	sp,sp,16
	_reschedule_threads(key);
80002d88:	fe8ff06f          	j	80002570 <_reschedule_threads>

80002d8c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
80002d8c:	ff010113          	addi	sp,sp,-16
80002d90:	00812423          	sw	s0,8(sp)
80002d94:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80002d98:	00800413          	li	s0,8
80002d9c:	300437f3          	csrrc	a5,mstatus,s0
	k_cpu_idle();
80002da0:	fddfe0ef          	jal	ra,80001d7c <k_cpu_idle>
80002da4:	ff9ff06f          	j	80002d9c <idle+0x10>

80002da8 <_OffsetAbsSyms>:
 * are aligned accordingly.
 */
GEN_ABSOLUTE_SYM(__NANO_ESF_SIZEOF, STACK_ROUND_UP(sizeof(NANO_ESF)));

/* size of the struct tcs structure sans save area for floating point regs */
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF,
80002da8:	00008067          	ret
